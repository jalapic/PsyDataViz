# Heatmaps

Heatmaps are generated by filling in the cells of a grid with a color gradient or palette. In `ggplot2` the function to use is `geom_tile()` to achieve this effect.

**Example 1 - example with categorical axes**

Here, we have a dataset where we have three columns. The first column represents categorical variables (A to E) that will go on the bottom x-axis. The second column represents categorical variables (A to E) that will go on the y-axis. We have one row for every possible combination, so in this case we have 25 rows. The third column contains the value that we wish to represent by the fill color in the tile of the heatmap. I am using random values between 1 and 100 for this. The higher the value, the deeper the color we will use.

```{r}
set.seed(101)
n <- 5
df <- data.frame(Var1=rep(LETTERS[1:n],n),
                 Var2=rep(LETTERS[1:n],each=n),
                 Value=sample(1:100, replace=T, n*n)
)
head(df)
```

Below, we will plot the heatmap without adding any stylistic elements.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)

```

```{r}
library(tidyverse)

ggplot(df, aes(Var1, Var2, fill = Value)) + 
  geom_tile() 
```

As can be seen, each cell (or tile) has a different degree of color fill based on it's cell value in the `Value` column of the dataframe `df`. Brighter and lighter colors represent higher values of the `Value` column.

A first step to make this prettier may be to add boundaries between the cells. This can be done by adding a `linewidth` and a `color` of this line as follows:

```{r}
ggplot(df, aes(Var1, Var2, fill = Value)) + 
  geom_tile(color="white", linewidth=1.75)
```

This looks nicer. Another thing that bugs me is that the default is to produce rectangular cells rather than square cells. This can be fixed by adding `coord_equal()`.

```{r}
ggplot(df, aes(Var1, Var2, fill = Value)) + 
  geom_tile(color="white", linewidth=1.75) +
  coord_equal()
```

A next step that I often to is to add the following code to ensure that my cells are centered above each label. In this case, this doesn't seem to change very much, but I have found it to be useful occasionally:

```{r}
ggplot(df, aes(Var1, Var2, fill = Value)) + 
  geom_tile(color="white", linewidth=1.75) +
  coord_equal() +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0)) 
```

The next thing that bugs me about this heatmap is that the default color gradient isn't particularly intuitive to me. I'd rather my values go from a light color (low values) to a darker color (high values). To do this, we can state a low and high color value within `scale_fill_continuous()`. Here, we go from a very light to a darker purple color.

```{r}
ggplot(df, aes(Var1, Var2, fill = Value)) + 
  geom_tile(color="white", linewidth=1.75) +
  coord_equal() +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0)) + 
  scale_fill_continuous(low="#edf4f7", high="#123abc")
```

Next, I find the axes labels and tick marks annoying, so I can remove these using `xlab("")`, `ylab("")`, and `axis.ticks()` inside `theme()`. I also increase the size of the labels on the axes.

```{r}
ggplot(df, aes(Var1, Var2, fill = Value)) + 
  geom_tile(color="white", linewidth=1.75) +
  coord_equal() +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0)) + 
  scale_fill_continuous(low="#edf4f7", high="#123abc") +
  xlab("") + 
  ylab("") +
  theme(
    axis.ticks = element_blank(), 
    axis.text = element_text(color="black", size=rel(1.2))
  )

```

Finally, I'd rather my legend be on the bottom of the heatmap, and we don't need the label on the legend. This can also be fixed within the `theme()` argument:

```{r}
ggplot(df, aes(Var1, Var2, fill = Value)) + 
  geom_tile(color="white", linewidth=1.75) +
  coord_equal() +
  scale_x_discrete(expand = c(0, 0)) +
  scale_y_discrete(expand = c(0, 0)) + 
  scale_fill_continuous(low="#edf4f7", high="#123abc") +
  xlab("") + 
  ylab("") +
  theme(
    axis.ticks = element_blank(), 
    axis.text = element_text(color="black", size=rel(1.2)),
    legend.text = element_text(color="black", size=rel(1.1)),
    legend.background = element_rect(fill="white"),
    legend.position = "bottom",
    legend.title=element_blank()
  ) 
```

```{r}

```

making diagonal NA, setting to white.
