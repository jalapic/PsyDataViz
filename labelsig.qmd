# Labeling Significance

Labeling significance on plots such as boxplots or bar graphs is typically denoted using stars or letters (sometimes called Tukey's signficance letters). These are placed either above one or more of the boxplots, or are placed in between and connected via lines. There is always a danger when adding this information that it becomes cluttered and distracting, so it is important to make clear design choices. Below are some ways of labeling significance on boxplots and bar graphs.

<br>

## Adding stars and p-values to plots

Probably the simplest way to add stars and p-values to plots is by using the `ggsignif` package. This adds an extra layer to each `ggplot` chart containing the stars.

Here is some example data with two groups:

```{r, warning=FALSE, message=FALSE}
set.seed(100)

df <- data.frame(
  values = c(rnorm(n=10,mean=4, sd = 0.5), 
             rnorm(n=12,mean=3.4, sd = 0.4)),
  subject = c(rep("Control",10), rep("Treatment",12))
)
head(df)
```

If we run a simple t-test on these data, we can see that the p-value for this test is 0.0009517.

```{r}
t.test(data=df, values ~ subject)
summary(aov(data=df, values ~ subject))
```

To make a boxplot with stars, we just add `geom_signif()` to our plot, but we need to add `comparisons = list(c("Control","Treatment"))` to tell it which groups we wish to compare.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
library(tidyverse)
library(ggsignif)

ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(comparisons = list(c("Control","Treatment")))

```

However, what you may notice is that this p-value is not the same as the one we got from the t-test above. This is because the default test it runs to compare groups is the wilcoxon rank sum test (a non-parametric equivalent to the independent' t-test that compares medians between independent groups).

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "wilcox.test", 
              comparisons = list(c("Control","Treatment")))


```

To get the p-value for the t-test we need to assign the test to be the `t.test`:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")))

```

It's also possible to round numbers to desired decimal places by adding a function within the parameter `map_signif_level`. Here, I round the p-value to 3 decimal places with `round()`.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              map_signif_level = function(p) paste("p =",round(p,3)))

```

Within this same function, we can actually also annotate text. Here I add "p =" to the beginning of the p-value output on the plot.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              map_signif_level = function(p) paste("p =",round(p,3)))

```

There are several other parameters within `geom_signif()` that can be tweaked to adjust the font type and position. This is using `textsize` to adjust the text size.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              textsize = 6)

```

<br>

**Adding stars to plots**

To switch from adding p-values to stars we just need to add `map_signif_level = T`

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              map_signif_level = T,
              textsize = 7) +
  theme_classic()

```

**What if not significant ?**

<br>

**Paired Data**

Can you do it for paired data - add in extra arguments related to the test in the `test.args()` argument. Make sure that the parameters are in a list.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(mpg, aes(x=manufacturer, y=displ)) +
    geom_boxplot()  +
    stat_signif(comparisons=list(c("audi", "ford"), c("hyundai", "nissan")),
                test="t.test", test.args=list(alternative = "two.sided", var.equal = FALSE, paired=FALSE))
```

**Multiple Groups**

If you use with multiple groups, you can assign multiple groups. But note that it is giving p-values from t.tests or wilcoxon tests.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}

```

### **Adding stars or p-values manually**

might want to compute the individual p-values separately and then use the `annotations` parameter to draw them.

    # creating a dataframe 
    (df <- tibble::tribble(
      ~x, ~lab,
      1, "p < 0.001",
      2, paste("list(~italic(p)<=", "0.001", ")", sep = "")
    ))
    #> # A tibble: 2 x 2
    #>       x lab                    
    #>   <dbl> <chr>                  
    #> 1     1 p < 0.001              
    #> 2     2 list(~italic(p)<=0.001)

    # ggplot supports parsing
    ggplot(mtcars, aes(as.character(am), wt)) + 
      geom_point() + 
      geom_signif(annotations = df$lab[2], comparisons = list(c("0", "1"))) +
      labs(x = parse(text = df$lab[2]))

**ggpubr package....**

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
library(ggpubr)
library(ggplot2)
ggplot(data, aes(x = label, y = value )) + 
  geom_boxplot() + 
  stat_compare_means(method = "anova", label.y = 7)+
  stat_compare_means(comparisons = list(c("A","B")), method = "t.test", label.y = 8)
```

### Adding significance to dynamite plots

I don't like dynamite plots. However, it is possible to add these significance annotations to them.

<br>

### Fancier example of adding significance to plots

## Adding Tukey's Significance Letters

Rather than denoting pairwise comparisons with stars or p-values, I prefer to use letter notation. Letters that are the same between two groups indicate no significant differences between those groups. Letters that differ between two groups indicate that those groups have significant differencess.

<br>

**One-Way ANOVA example**

Let's create some random data. We'll make a dataframe of six groups.

```{r}
set.seed(10)
df <- data.frame(
  value = c(rnorm(n = 10, mean = 10, sd = 1.8),
            rnorm(n = 12, mean = 11, sd = 1.0),
            rnorm(n = 14, mean = 13, sd = 1.1),
            rnorm(n = 16, mean = 15, sd = 1.2),
            rnorm(n = 12, mean = 14, sd = 2.2),
            rnorm(n = 10, mean = 10, sd = 1.0)),
  categ = c(rep("A",10), rep("B",12), rep("C",14), 
          rep("D",16), rep("E",12), rep("F",10)
          )
)

head(df)
```

We can plot the basic boxplot of these data like this:

```{r, fig.height=5, fig.width=5}
ggplot(df, aes(x=categ, y=value)) +
  geom_boxplot() +
  theme_classic()
```

To compare significance differences between groups, we could run Tukey post-hoc tests using Honestly Signficant Differences. This is done using the `TukeyHSD()` function in base R, but using the `HSD.test()` function from the `agricolae` R package, we can get the letter notation we need directly.

This code runs the post hoc test and the groups part of it gives us the letter notations we need:

```{r, warning=FALSE, message=FALSE}
library(agricolae)

hsd <- HSD.test(aov(value ~ categ, data=df), "categ", group=T)
hsd

```

To add these letters on to the plot, we need to decide where to put them. The x coordinate will be the mid point of each category (which can just be the name of the group), and the y coordinate will be above the maximum value of that group. But note that the groups in the summary output are reorganized from highest median value to lowest. I find it easiest to add these to our summary output in the appropriate order.

```{r}
df.sum <- df %>% 
  group_by(categ) %>% 
  summarize(maxval = max(value), 
            med = median(value),
            uq = quantile(value, .75)) %>% 
  arrange(-med)

df.sum$letters <- hsd$groups$groups

df.sum

```

This code plots the letters above the boxplots at a y coordinate 0.2 higher than the max value.

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=categ,y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters)) +
  theme_classic() +
  xlab("Category")
```

In the above plot, we can see that Group B is not significantly different from Group C or Group F (because both share the `b` and `c` letter, but is significantly different from the other groups. Groups D and E are not significantly different from each other (they both have an `a`) but are significantly different from all other groups.

We should reorder the plot though to make it more readable:

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters)) +
  theme_classic() +
  xlab("Category")
```

We can nudge the letters up a bit using `vjust=0`:

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters), vjust=0) +
  theme_classic() +
  xlab("Category")
```

Alternatively, you may wish to plot the letters to the side of the upper quartile. I don't like this very much, but it's an option. I also make the letters bold in this example using `fontface="bold"`.

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=uq,
                label=letters,
                hjust = -1, 
                vjust = -0.8, 
                fontface = "bold")) +
  theme_classic() +
  xlab("Category")

```

Just for fun, here I'm including `aes(fill = factor(..middle..)))` and `scale_fill_brewer(palette = "Reds")` to make the colors of the boxplots a shade of red that is equivalent to their categorical position.

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot(aes(fill = factor(..middle..)))+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters), vjust=0) +
  theme_classic() +
  xlab("Category") +
  scale_fill_brewer(palette = "Reds") +
  theme(legend.position = 'none')

```

This approach using `geom_text()` to add letters to a plot can be modified for any statistical test.

<br>
