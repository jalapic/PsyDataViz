# Labeling Significance

Labeling significance on plots such as boxplots or bar graphs is typically denoted using stars or letters (sometimes called Tukey's signficance letters). These are placed either above one or more of the boxplots, or are placed in between and connected via lines. There is always a danger when adding this information that it becomes cluttered and distracting, so it is important to make clear design choices. Below are some ways of labeling significance on boxplots and bar graphs.

<br>

## Adding stars and p-values to plots

Probably the simplest way to add stars and p-values to plots is by using the `ggsignif` package. This adds an extra layer to each `ggplot` chart containing the stars.

Here is some example data with two groups:

```{r, warning=FALSE, message=FALSE}
set.seed(100)

df <- data.frame(
  values = c(rnorm(n=10,mean=4, sd = 0.5), 
             rnorm(n=12,mean=3.4, sd = 0.4)),
  subject = c(rep("Control",10), rep("Treatment",12))
)
head(df)
```

If we run a simple t-test on these data, we can see that the p-value for this test is 0.0009517.

```{r}
t.test(data=df, values ~ subject)
```

To make a boxplot with stars, we just add `geom_signif()` to our plot, but we need to add `comparisons = list(c("Control","Treatment"))` to tell it which groups we wish to compare.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
library(tidyverse)
library(ggsignif)

ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(comparisons = list(c("Control","Treatment")))

```

However, what you may notice is that this p-value is not the same as the one we got from the t-test above. This is because the default test it runs to compare groups is the wilcoxon rank sum test (a non-parametric equivalent to the independent' t-test that compares medians between independent groups).

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "wilcox.test", 
              comparisons = list(c("Control","Treatment")))


```

To get the p-value for the t-test we need to assign the test to be the `t.test`:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")))

```

It's also possible to round numbers to desired decimal places by adding a function within the parameter `map_signif_level`. Here, I round the p-value to 3 decimal places with `round()`.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              map_signif_level = function(p) paste("p =",round(p,3)))

```

Within this same function, we can actually also annotate text. Here I add "p =" to the beginning of the p-value output on the plot.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              map_signif_level = function(p) paste("p =",round(p,3)))

```

There are several other parameters within `geom_signif()` that can be tweaked to adjust the font type and position. This is using `textsize` to adjust the text size.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              textsize = 6)

```

<br>

**Adding stars to plots**

To switch from adding p-values to stars we just need to add `map_signif_level = T`

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(df, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              map_signif_level = T,
              textsize = 7) +
  theme_classic()

```

<br>

**What if not significant ?**

In the data below, we can see that there is no significant difference between our two groups in means.

```{r}
set.seed(100)

ddf <- data.frame(
  values = c(rnorm(n=10,mean=7.1, sd = 0.5), 
             rnorm(n=12,mean=7.2, sd = 0.4)),
  subject = c(rep("Control",10), rep("Treatment",12))
)

t.test(data=ddf, values ~ subject)
```

What does this look like if we use `geom_signif()` to plot ?

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(ddf, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              textsize = 6)
```

The default plot will add the p-value. If we add `map_signif_level = T` to plot 'stars', we get the following:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
ggplot(ddf, aes(x=subject, y=values)) +
  geom_boxplot() +
  geom_signif(test = "t.test", 
              comparisons = list(c("Control","Treatment")),
              map_signif_level = T,
              textsize = 6)
```

For some reason to me, the dot after NS I find quite irritating. However, this can be all overridden by applying direct annotations (see below).

<br>

**Paired Data**

The above examples are all two-tailed independent tests. However, it is possible to apply `geom_signif()` to one-tailed or paired tests. Let's create some paired data:

```{r}
set.seed(103)

pdf <- data.frame(
  subj = letters[1:12],
  before = runif(12),
  after = runif(12)
)

pdf
```

If we run a paired t-test on these data we can see a significant difference in means of p=0.04:

```{r}
t.test(pdf$before, pdf$after, paired=T)
```

To make the basic boxplot, we need to turn the data into long form. We also factor the new `time` column as annoyingly the word 'after' is alphabetically earlier than 'before' and we want them plotted the opposite way around on the x-axis:

```{r}
pdf.long <- pdf %>% pivot_longer(cols=2:3, names_to = "time")
pdf.long$time <- factor(pdf.long$time, levels=c("before","after"))
pdf.long
```

Here is the basic boxplot. I'm using the `theme_pubclean()` from the `ggpubr` package:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
library(ggpubr)

p0 <- ggplot(pdf.long, aes(x=time, y=value)) +
  geom_boxplot(fill='dodgerblue', alpha=.3) +
  theme_pubclean() +
  xlab("Time") +
  ylab("Value")

p0
```

To add the p-values for paired data we need to add in extra information related to the test in the `test.args()` argument. Make sure that the parameters are in a list.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
p0  +
    stat_signif(comparisons=list(c("before", "after")),
                test="t.test", 
                test.args=list(alternative = "two.sided", 
                               var.equal = FALSE, 
                               paired=T))
```

... in the above example, we perform a two-tailed paired t-test not assuming equal variances. If we wished to perform a one-tailed t-test, testing if the 'before' mean is significantly lower than the 'after' group, we can change that in the `test.args` parameter. Recall, that for a one-sided t-test, the p-value will be half the value of a two-tailed t-test:

```{r}
t.test(pdf$before, pdf$after, paired=T, alternative = "less")
```

... and the plot would look as follows:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
p0  +
    stat_signif(comparisons=list(c("before", "after")),
                test="t.test", 
                test.args=list(alternative = "less", 
                               var.equal = FALSE, 
                               paired=T))
```

As before, we can add stars using the `map_signif_level = T` argument. I also increase the font size using `textsize = 7` and reduce the sides of the horizontal bar with `tip_length=0`:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
 p0  +
    stat_signif(comparisons=list(c("before", "after")),
                test="t.test", 
                map_signif_level = T,
                textsize = 7,
                tip_length = 0,
                test.args=list(alternative = "less", 
                               var.equal = FALSE, 
                               paired=T))
```

<br>

### Adding Significance to Multiple Groups

Adding stars or p-values to plots can also be done when there are more than two groups. Obviously, the more groups that exist, the more potential pairwise comparisons there are. It should be noted that by default, `geom_signif()` will run pairwise wilcoxon ranked sum tests or independent t-tests on each of hte pairwise comparisons. This may be what you wish to report, but more often we are likely to want to report posthoc comparisons or such like. I personally would still advocate for using the Tukey Significance Letters as shown below. It's also possible to directly annotate plots ourselves with `geom_signif()`  - see below. But first, let's look at how it does add these pairwise t-tests p-values to plots.

Here is some example data with three groups:

```{r}
set.seed(10)

mdf <- data.frame(
  values = c(rnorm(n=10,mean=3.8, sd = 0.5), 
             rnorm(n=12,mean=3.1, sd = 0.4),
             rnorm(n=15, mean=3.5, sd=0.3)),
  grp = c(rep("A",10), rep("B",12), rep("C",15))
)
head(mdf)

```

If we run a one way ANOVA, with posthoc tests, we can see how the groups differ:

```{r}
fit <- aov(data = mdf, values ~ grp)

summary(fit)

TukeyHSD(fit)
```

This might be how we would plot the data in a basic boxplot:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}

pb <- ggplot(mdf, aes(x=grp, y=values, fill=grp)) +
  geom_boxplot() +
  scale_fill_manual(values=c("#cceeee", "#bbebbe", "#dddeee")) +
  theme_pubclean() +
  theme(legend.position = 'none') +
  xlab("") +
  ylab("Values")

pb

```

We can add our stars and NS in the same way as before. We just need to put all the relevant comparisons we wish to make in the list, and add `step_increase=` to make sure that the lines do not overlap each other. Note that the order in which the horizontal lines are added onto the plot are dictated by the order in which they occur in the list.

```{r}
pb +
  geom_signif(comparisons = list(c("A", "B"),
                                 c("A", "C"),
                                 c("B", "C")),
              test = "t.test", 
              step_increase = 0.075,
              map_signif_level = TRUE, 
              tip_length = 0)
```

This way of plotting stars and significance levels is completely functional, however, another options would be to manually add them (see section below). One major advantage of this is that we can plot posthoc tests rather than running t-tests on each comparison.

<br>

### **Adding stars or p-values manually**

We can compute the individual p-values separately and then use the `annotations` parameter to draw them. The code below grabs the p-values for Tukey HSD posthoc comparions between each of the groups from the previous example.

```{r}
pvals <- round(TukeyHSD(fit)$grp[,4],2)
pvals
```

We can add these manually to our plot. The `y_position` dictates how high up the y-axis each lines goes. The `xmin` and `xmax` dictate the start and end point of each horizontal line. Group A starts at 1 on the x-axis, Group B at 2 and Group C at 3.

```{r}
pb + 
  geom_signif(y_position = c(4.1,4.25,4.4), 
              xmin = c(1,1,2), 
              xmax = c(2,3,3), 
              annotation = pvals,
              tip_length = 0) 
```

Instead of passing a vector of annotations that is an object, you can write your own vector like this:

```{r}
pb + 
  geom_signif(y_position = c(4.1,4.25,4.4), 
              xmin = c(1,1,2), 
              xmax = c(2,3,3), 
              annotation = c("p < .05", "NS", "NS"),
              tip_length = 0) 


```

If you didn't want to mess around with `xmin` and `xmax`, you can pass a list of comparisons. You just need to then supply the annotations and the `y_position`. Here, I switched up the order in which the lines were drawn:

```{r}
pb +
  geom_signif(comparisons = list(c("A","B"),
                                 c("B","C"),
                                 c("A","C")), 
              y_position = c(4.1,4.25,4.4),
             annotation = c("p < .05", "NS", "NS"),
              tip_length = 0.01)
```

<br>

### Fancier example of adding significance to plots

from youtube video.

<br>

### Adding Significance to Bar graphs

Adding stars or p-values to bar graphs is the same as with boxplots. We add layers to the plot using `geom_signif()`. If we produce the bar graph with `geom_col()` then we are plotting summary information without the underlying raw data, we will need to add information to the graph using annotations.

```{r}
dat <- data.frame(Group = c("G1","G1","G2","G2"),
                   Subject = c("A","B","A","B"),
                   Value = c(3,2,12,17))

dat
```

This dataframe just has four rows, with the `Value` column showing the height of the bar to be plotted. We can plot a bar graph using `geom_col()` and we include `position='dodge'` to make a side-by-side bar chart as opposed to a stacked bar chart. I've also used the `theme_pubclean()` from the `ggpubr` package and set some custom fills. I assign this plot to the object `p` so we can modify other layers without rewriting the code:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}


p <- ggplot(dat, aes(Group,Value,fill=Subject))+
  geom_col(position = 'dodge') +
  theme_pubclean() +
  scale_fill_manual(values=c("#ababde","#123abc"))

p
```

To add either stars or p-values we just use `geom_signif()`. First, we'll annotate the A vs B comparisons. We dictate the position of the horizontal line we add with `xmin` and `xmax` and `y_position`. The mid-point between the light and dark blue bars are at `x=1` for G1 and `x=2` for G2. This helps us determine what values to use for `xmin` and `xmax`. The values of `y_position` are picked based on the values of A & B in each group. Using `tip_length=0` sets there to be no lines coming down from the edges of the horizontal black lines we add. If we wish to have some of those downward lines, then a really small value like 0.03 would probably be best.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
p + 
  geom_signif(y_position = c(4,18), 
              xmin = c(0.8,1.8), 
              xmax = c(1.2,2.2), 
              annotation = c("NS","**"),
              tip_length = 0)
```

To add the horizontal black line between our two groups (G1 and G2), we add another `geom_signif()` layer. Because this is a comparison between the levels of our groups in our original dataframe, we use the `comparisons=` parameter. That will add the x positions - although it is still possible to do these manually should we wish. We can also set the `y_position()` ourselves.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}

p + 
  geom_signif(y_position = c(4,18), 
              xmin = c(0.8,1.8), 
              xmax = c(1.2,2.2), 
              annotation = c("NS","**"),
              tip_length = 0) +
  geom_signif(comparisons = list(c("G1","G2")), 
              y_position = 21,
              annotation = "p < 0.001",
              tip_length = 0) 
```

Clearly, you wouldn't mix numerical p-values with stars like this on an actual figure, but for the purpose of illustration, you can write anything you like inside `annotation =` and it will appear on the plot.

<br>

### Adding significance to dynamite plots

I don't like dynamite plots. However, it is possible to add these significance annotations to them. It is done in the identical way to the bar charts above. Note how when we add extra annotations, the plot margins automatically adjust, so we don't need to worry about rescaling the axes.

Let's use some example data:

```{r}
dat1 <- data.frame(Group = c("G1","G1","G2","G2"),
                   Subject = c("A","B","A","B"),
                   Mean = c(1.1, 1.4, 2.5, 2.0),
                   Serr = c(0.1, 0.2, 0.35, 0.3))

dat1
```

Here we plot these data in the same manner as with the bar charts above, but we add error bars manually using `geom_errorbar()` based on the summary data in the dataframe. Note that with these stacked bar charts, we also need to add `position=position_dodge(.9)` to ensure the error bars stay in the middle of the respective bars.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
p1 <- ggplot(dat1, aes(x=Group, y=Mean, fill=Subject)) + 
  geom_col(color="black", position=position_dodge()) +
  scale_fill_manual(values=c('#999999','#E69F00')) +
  theme_pubclean() +
  geom_errorbar(aes(ymin = Mean-Serr, 
                    ymax = Mean+Serr), 
                  width=.2,
                  position=position_dodge(.9)) 

p1
```

Using `geom_signif()` we manually add the stars and other annotations:

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
p1 + 
  geom_signif(y_position = c(1.75,3.0), 
              xmin = c(0.8,1.8), 
              xmax = c(1.2,2.2), 
              annotation = c("*","NS"),
              tip_length = 0) 
```

<br>

<br>

### **Other R packages for adding significance levels**  

Not to sidetrack too much, but other R packages also offer the possibility of interfacing with ggplots and adding significance levels. One such example that could be looked at is the `ggpubr` package. I won't give a full overview of how this package achieves much of what we have shown above, but here are a couple of quick examples. We'll use some of the same datasets as above.

```{r, warning=FALSE, message=FALSE, fig.width=4, fig.height=4}
library(ggpubr)
library(ggplot2)
ggplot(data, aes(x = label, y = value )) + 
  geom_boxplot() + 
  stat_compare_means(method = "anova", label.y = 7)+
  stat_compare_means(comparisons = list(c("A","B")), method = "t.test", label.y = 8)
```

<br>

<br>

## Adding Tukey's Significance Letters

Rather than denoting pairwise comparisons with stars or p-values, I prefer to use letter notation. Letters that are the same between two groups indicate no significant differences between those groups. Letters that differ between two groups indicate that those groups have significant differencess.

<br>

**One-Way ANOVA example**

Let's create some random data. We'll make a dataframe of six groups.

```{r}
set.seed(10)
df <- data.frame(
  value = c(rnorm(n = 10, mean = 10, sd = 1.8),
            rnorm(n = 12, mean = 11, sd = 1.0),
            rnorm(n = 14, mean = 13, sd = 1.1),
            rnorm(n = 16, mean = 15, sd = 1.2),
            rnorm(n = 12, mean = 14, sd = 2.2),
            rnorm(n = 10, mean = 10, sd = 1.0)),
  categ = c(rep("A",10), rep("B",12), rep("C",14), 
          rep("D",16), rep("E",12), rep("F",10)
          )
)

head(df)
```

We can plot the basic boxplot of these data like this:

```{r, fig.height=5, fig.width=5}
ggplot(df, aes(x=categ, y=value)) +
  geom_boxplot() +
  theme_classic()
```

To compare significance differences between groups, we could run Tukey post-hoc tests using Honestly Signficant Differences. This is done using the `TukeyHSD()` function in base R, but using the `HSD.test()` function from the `agricolae` R package, we can get the letter notation we need directly.

This code runs the post hoc test and the groups part of it gives us the letter notations we need:

```{r, warning=FALSE, message=FALSE}
library(agricolae)

hsd <- HSD.test(aov(value ~ categ, data=df), "categ", group=T)
hsd

```

To add these letters on to the plot, we need to decide where to put them. The x coordinate will be the mid point of each category (which can just be the name of the group), and the y coordinate will be above the maximum value of that group. But note that the groups in the summary output are reorganized from highest median value to lowest. I find it easiest to add these to our summary output in the appropriate order.

```{r}
df.sum <- df %>% 
  group_by(categ) %>% 
  summarize(maxval = max(value), 
            med = median(value),
            uq = quantile(value, .75)) %>% 
  arrange(-med)

df.sum$letters <- hsd$groups$groups

df.sum

```

This code plots the letters above the boxplots at a y coordinate 0.2 higher than the max value.

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=categ,y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters)) +
  theme_classic() +
  xlab("Category")
```

In the above plot, we can see that Group B is not significantly different from Group C or Group F (because both share the `b` and `c` letter, but is significantly different from the other groups. Groups D and E are not significantly different from each other (they both have an `a`) but are significantly different from all other groups.

We should reorder the plot though to make it more readable:

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters)) +
  theme_classic() +
  xlab("Category")
```

We can nudge the letters up a bit using `vjust=0`:

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters), vjust=0) +
  theme_classic() +
  xlab("Category")
```

Alternatively, you may wish to plot the letters to the side of the upper quartile. I don't like this very much, but it's an option. I also make the letters bold in this example using `fontface="bold"`.

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot()+
  geom_text(data=df.sum,
            aes(x=categ,y=uq,
                label=letters,
                hjust = -1, 
                vjust = -0.8, 
                fontface = "bold")) +
  theme_classic() +
  xlab("Category")

```

Just for fun, here I'm including `aes(fill = factor(..middle..)))` and `scale_fill_brewer(palette = "Reds")` to make the colors of the boxplots a shade of red that is equivalent to their categorical position.

```{r, warning=FALSE, message=FALSE, fig.height=5, fig.width=5}
ggplot(df,aes(x=reorder(categ,-value,median),y=value))+
  geom_boxplot(aes(fill = factor(..middle..)))+
  geom_text(data=df.sum,
            aes(x=categ,y=0.2+maxval,
                label=letters), vjust=0) +
  theme_classic() +
  xlab("Category") +
  scale_fill_brewer(palette = "Reds") +
  theme(legend.position = 'none')

```

This approach using `geom_text()` to add letters to a plot can be modified for any statistical test.

<br>
