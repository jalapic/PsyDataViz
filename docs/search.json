[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PsyDataViz",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code. Adding something to check.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "heatmaps.html",
    "href": "heatmaps.html",
    "title": "2  Heatmaps",
    "section": "",
    "text": "Heatmaps are generated by filling in the cells of a grid with a color gradient or palette. In ggplot2 the function to use is geom_tile() to achieve this effect.\nExample 1 - example with categorical axes\nHere, we have a dataset where we have three columns. The first column represents categorical variables (A to E) that will go on the bottom x-axis. The second column represents categorical variables (A to E) that will go on the y-axis. We have one row for every possible combination, so in this case we have 25 rows. The third column contains the value that we wish to represent by the fill color in the tile of the heatmap. I am using random values between 1 and 100 for this. The higher the value, the deeper the color we will use.\n\nset.seed(101)\nn <- 5\ndf <- data.frame(Var1=rep(LETTERS[1:n],n),\n                 Var2=rep(LETTERS[1:n],each=n),\n                 Value=sample(1:100, replace=T, n*n)\n)\nhead(df)\n\n  Var1 Var2 Value\n1    A    A    73\n2    B    A    57\n3    C    A    46\n4    D    A    95\n5    E    A    81\n6    A    B    58\n\n\nBelow, we will plot the heatmap without adding any stylistic elements.\n\n\n\n\nlibrary(tidyverse)\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile() \n\n\n\n\nAs can be seen, each cell (or tile) has a different degree of color fill based on it’s cell value in the Value column of the dataframe df. Brighter and lighter colors represent higher values of the Value column.\nA first step to make this prettier may be to add boundaries between the cells. This can be done by adding a linewidth and a color of this line as follows:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75)\n\n\n\n\nThis looks nicer. Another thing that bugs me is that the default is to produce rectangular cells rather than square cells. This can be fixed by adding coord_equal().\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal()\n\n\n\n\nA next step that I often to is to add the following code to ensure that my cells are centered above each label. In this case, this doesn’t seem to change very much, but I have found it to be useful occasionally:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) \n\n\n\n\nThe next thing that bugs me about this heatmap is that the default color gradient isn’t particularly intuitive to me. I’d rather my values go from a light color (low values) to a darker color (high values). To do this, we can state a low and high color value within scale_fill_continuous(). Here, we go from a very light to a darker purple color.\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\")\n\n\n\n\nNext, I find the axes labels and tick marks annoying, so I can remove these using xlab(\"\"), ylab(\"\"), and axis.ticks() inside theme(). I also increase the size of the labels on the axes.\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2))\n  )\n\n\n\n\nFinally, I’d rather my legend be on the bottom of the heatmap, and we don’t need the label on the legend. This can also be fixed within the theme() argument:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  ) \n\n\n\n\nAs a quick aside - what happens if we have missing values in our Value column? Let’s introduce five random NA values into that column:\n\ndf$Value[sample(1:25,5)]<-NA\nhead(df)\n\n  Var1 Var2 Value\n1    A    A    NA\n2    B    A    57\n3    C    A    46\n4    D    A    95\n5    E    A    81\n6    A    B    NA\n\n\nNow we can plot with the same code as above:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  ) \n\n\n\n\nWhat happens is that these default to a dark-greyish beige color, as seen above. In some circumstances, this color fill will be fine. However, in other situations we might want to dictate the color. Here, we make those NA cells white by adding na.value = \"white\" inside our scale_fill_continuous() .\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\", na.value = \"white\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )"
  }
]