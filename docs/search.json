[
  {
    "objectID": "lollipop.html",
    "href": "lollipop.html",
    "title": "8  Lollipop Plots",
    "section": "",
    "text": "Lollipop plots are a way to represent the same information as bar charts but in a more aesthetically pleasing way. They are comprised of a line and a dot.\nIn ggplot2 we can create them using geom_segment() to create the line and geom_point() to create the dot.\nThe dataset we’ll use in this tutorial is station_usage which provides information on passenger numbers using UK train stations during 2017. We’ll just keep the variables we need and clean up the column names. We also need to edit the Passengers column to ensure it’s numeric after we remove the commas.\n\nrail <- read.csv(\"data_raw/station_usage.csv\")\n\ndf <- rail[c(2:4,15,20)]\ncolnames(df) <- c(\"TLC\",\"Name\",\"Region\",\"Network\",\"Passengers\")\ndf$Passengers <- as.numeric(gsub(\",\",\"\",df$Passengers))\nhead(df)\n\n  TLC       Name        Region            Network Passengers\n1 ABW Abbey Wood        London           Southern    3769402\n2 ABE       Aber Wales - Cymru    Wales & Western     283894\n3 ACY  Abercynon Wales - Cymru    Wales & Western     329532\n4 ABA   Aberdare Wales - Cymru    Wales & Western     581388\n5 ABD   Aberdeen      Scotland Scotland's Railway    2616142\n6 AUR   Aberdour      Scotland Scotland's Railway     140048\n\n\nLet’s say we wished to create a dot plot of the top 10 stations in Scotland for passenger numbers. We can use slice_max() to get the top 10:\n\nlibrary(tidyverse)\n\ntop10 <- df %>% filter(Region==\"Scotland\") %>% slice_max(Passengers, n=10)\ntop10\n\n   TLC                    Name   Region            Network Passengers\n1  GLC         Glasgow Central Scotland Scotland's Railway   32797088\n2  EDB               Edinburgh Scotland Scotland's Railway   23872996\n3  GLQ    Glasgow Queen Street Scotland Scotland's Railway   17207208\n4  PYG  Paisley Gilmour Street Scotland Scotland's Railway    4027962\n5  HYM               Haymarket Scotland Scotland's Railway    3068112\n6  PTK                 Partick Scotland Scotland's Railway    2944084\n7  ABD                Aberdeen Scotland Scotland's Railway    2616142\n8  STG                Stirling Scotland Scotland's Railway    2480154\n9  CHC Charing Cross (Glasgow) Scotland Scotland's Railway    2229356\n10 DEE                  Dundee Scotland Scotland's Railway    2015782\n\n\nTo make our basic lollipop plot with no customization, we need to add a point and a segment. We’ll use the station code rather than the full name for space. With geom_segment() we need to give it’s horizontal width by giving a start and end point for the x-axis, and we do the same on the y-axis for the height.\n\nggplot(top10, aes(x=TLC, y=Passengers)) +\n  geom_point() + \n  geom_segment(aes(x=TLC, xend=TLC, y=0, yend=Passengers))\n\n\n\n\nThe first thing I’d like to do here is reorder the stations so they are not in alphabetical order, but in descending numerical order. We also provide a title on the x-axis:\n\nggplot(top10, aes(x=reorder(TLC,-Passengers), y=Passengers)) +\n  geom_point() + \n  geom_segment(aes(x=TLC, xend=TLC, y=0, yend=Passengers)) +\n  xlab(\"Station\")\n\n\n\n\nWe can customize the colors and sizes of our segment lines and dots. Below, we first factor the TLC column to have the top 10 stations in Passenger order. This is so when we assign the red color and fill (using the brewer.reds palette from the pals package), it plots the colors in the correct order and not in alphabetical order.\n\ntop10$TLC <- factor(top10$TLC, levels = top10 %>% pull(TLC))\n\n\nggplot(top10, aes(x=TLC, y=Passengers, color=TLC, fill=TLC)) +\n  geom_segment(aes(x=TLC, xend=TLC, y=0, yend=Passengers),linewidth=1.5)+\n  geom_point(size=4, stroke=2) +\n  xlab(\"Station\") +\n  scale_color_manual(values = rev(pals::brewer.reds(10))) +\n  scale_fill_manual(values = rev(pals::brewer.reds(10))) \n\n\n\n\nBelow I add some extra customization. We set the theme to be theme_light, remove the legend which is superfluous and tidy up the panel border and x-axis ticks. I also change the y-axis scale to show numbers in millions with the letter “M”. This is using the scales::label_number function (from the scales package).\n\nggplot(top10, aes(x=TLC, y=Passengers, color=TLC, fill=TLC)) +\n  geom_segment(aes(x=TLC, xend=TLC, y=0, yend=Passengers),linewidth=1.5)+\n  geom_point(size=4, stroke=2) +\n  xlab(\"Station\") +\n  scale_color_manual(values = rev(pals::brewer.reds(10))) +\n  scale_fill_manual(values = rev(pals::brewer.reds(10))) +\n  scale_y_continuous(labels = scales::label_number(suffix = \" M\", scale = 1e-6)) +\n  theme_light() +\n  theme(legend.position='none',\n        axis.ticks.x = element_blank(),\n        panel.border = element_blank())\n\n\n\n\n\n\n8.0.1 Lollipop Charts adding Baselines and Highlighting\nSometimes it helps to visualize changes from some baseline level. In the following example, we are going to look at percent changes in rail passengers usage from 2017 compared to the previous year. Below, we grab all the stations in the “East Midlands” region and collect and rename the columns we want. We also ensure that the columns we need to be numeric are:\n\nrr <- rail[rail$Region==\"East Midlands\",]\nrr <- rr[c(2:4,15,20,27)]\ncolnames(rr) <- c(\"TLC\",\"Name\",\"Region\",\"Network\",\"Passengers\",\"PctChange\")\nrr$Passengers <- as.numeric(gsub(\",\",\"\",rr$Passengers))\nrr$PctChange <- as.numeric(gsub(\"%\",\"\",rr$PctChange))\nhead(rr)\n\n    TLC         Name        Region              Network Passengers PctChange\n43  ALF     Alfreton East Midlands              Eastern     314464       5.6\n56  AMB    Ambergate East Midlands              Eastern      41130     -11.6\n60  ANC     Ancaster East Midlands              Eastern       5904     -10.2\n107 ALK    Aslockton East Midlands              Eastern      31204      25.1\n114 ATB Attenborough East Midlands              Eastern      99484      -7.8\n139 BAM      Bamford East Midlands North West & Central      34526       9.1\n\n\nFor the plot, we want to have a new column that will be called UpDown which will depict whether the percent change is positive or negative. Also, we are going to plot stations on the x-axis in their rank order, so we set the levels of the station column TLC to be in the correct order by using arrange and pull.\n\nrr$UpDown <- ifelse(rr$PctChange > 0, \"up\",\"down\")\n\nrr %>% arrange(-Passengers) %>% pull(TLC)\n\n  [1] \"NOT\" \"LEI\" \"DBY\" \"NMP\" \"LCN\" \"CHD\" \"GRA\" \"LBO\" \"GLO\" \"KET\" \"WEL\" \"NNG\"\n [13] \"MHR\" \"NCT\" \"LGE\" \"BEE\" \"RET\" \"WRK\" \"MFT\" \"HDF\" \"NBR\" \"LBK\" \"SMD\" \"EMD\"\n [25] \"SKG\" \"HNK\" \"BUX\" \"ALF\" \"SLR\" \"COR\" \"MMO\" \"OKM\" \"NMN\" \"BSN\" \"SYS\" \"NMC\"\n [37] \"BLP\" \"MAT\" \"HKN\" \"SPK\" \"DRO\" \"SPA\" \"MSW\" \"KKB\" \"HKM\" \"DTG\" \"GBL\" \"WBR\"\n [49] \"ILN\" \"CLY\" \"SIL\" \"CLM\" \"MGM\" \"ATB\" \"EDL\" \"LGM\" \"BWS\" \"SHB\" \"SWS\" \"RKT\"\n [61] \"BIN\" \"KGS\" \"SXY\" \"LOW\" \"TUT\" \"MKR\" \"HOP\" \"DFI\" \"HSG\" \"BLW\" \"CEF\" \"HEC\"\n [73] \"BTF\" \"MTB\" \"GRN\" \"CTO\" \"WFL\" \"CMF\" \"AMB\" \"NSD\" \"CWD\" \"WIL\" \"FSK\" \"SRO\"\n [85] \"BAM\" \"ALK\" \"FNV\" \"WTS\" \"WWL\" \"LAG\" \"SPO\" \"SWD\" \"BUJ\" \"RAU\" \"RDF\" \"NET\"\n [97] \"BSB\" \"ROL\" \"DVH\" \"ANC\" \"SWE\" \"THU\" \"PEA\" \"GNB\" \"HBB\" \"TPC\" \"ELO\" \"HVN\"\n\nrr$TLC <- factor(rr$TLC, levels = rr %>% arrange(-Passengers) %>% pull(TLC))\nrr$Name <- factor(rr$Name, levels = rr %>% arrange(-Passengers) %>% pull(Name))\n\nThe code for the plot is below. geom_segment() and geom_point() are doing the same job as before. Our y-axis ranges from negative values to positive, and 0 is our baseline. So we use y=0 as the baseline value in geom_segment().\n\nggplot(rr,aes(x=Name, y=PctChange,color=UpDown, fill=UpDown)) +\n  geom_segment(aes(x=Name, xend=Name, y=0, yend=PctChange))+\n  geom_point(size=2)+\n  scale_color_manual(values = c(\"#FA8072\",\"darkblue\" )) +\n  scale_fill_manual(values = c( \"#FA8072\",\"darkblue\"))  +\n  xlab(\"Station\") +\n  ylab(\"Percent Change from Previous Year %\") +\n  theme_light() +\n  theme(legend.position='none',\n        axis.ticks.x = element_blank(),\n        panel.border = element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,size=5)) \n\n\n\n\nThe above chart is quite useful for visualizing overall trends quickly, but the plot is quite busy with many individual stations on the x-axis. Without zooming in, it’s hard to identify which stations had the biggest percentage changes. One way to help with this is to use highlighting of the segments and points as well as the axis labels. In this example we do it by using ifelse() logical expressions. This does work, although ggplot2 gives a warning message for using it inside the axis.text.x argument. But, for now, at least, it works fine.\n\nggplot(rr,aes(x=Name, y=PctChange)) +\n  geom_segment(\n    aes(x=Name, \n        xend=Name, \n        y=0, \n        yend=PctChange),\n        color=ifelse(rr$PctChange < -25, \"darkorange\", \"grey44\"), \n        linewidth=ifelse(rr$PctChange < -25, 1.1, 0.7)\n    )+\n  geom_point(\n         color=ifelse(rr$PctChange < -25, \"darkorange\", \"grey44\"), \n         size=ifelse(rr$PctChange < -25, 3, 1)) +\n  xlab(\"Station\") +\n  ylab(\"Percent Change from Previous Year %\") +\n  theme_light() +\n  theme(legend.position='none',\n        axis.ticks.x = element_blank(),\n        panel.border = element_blank(),\n        panel.grid.major.x = element_blank(),\n        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1,\n                     face=ifelse(rr$PctChange < -25,\"bold\",\"plain\"),\n                     size=ifelse(rr$PctChange < -25,7,5),\n                     color=ifelse(rr$PctChange < -25,\"#A14A11\",\"grey44\"))\n        )"
  }
]