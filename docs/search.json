[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PsyDataViz",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code. Adding something to check.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "heatmaps.html",
    "href": "heatmaps.html",
    "title": "2  Heatmaps",
    "section": "",
    "text": "Heatmaps are generated by filling in the cells of a grid with a color gradient or palette. In ggplot2 the function to use is geom_tile() to achieve this effect.\n\nExample 1 -Categorical axes\nHere, we have a dataset where we have three columns. The first column represents categorical variables (A to E) that will go on the bottom x-axis. The second column represents categorical variables (A to E) that will go on the y-axis. We have one row for every possible combination, so in this case we have 25 rows. The third column contains the value that we wish to represent by the fill color in the tile of the heatmap. I am using random values between 1 and 100 for this. The higher the value, the deeper the color we will use.\n\nset.seed(101)\nn <- 5\ndf <- data.frame(Var1=rep(LETTERS[1:n],n),\n                 Var2=rep(LETTERS[1:n],each=n),\n                 Value=sample(1:100, replace=T, n*n)\n)\nhead(df)\n\n  Var1 Var2 Value\n1    A    A    73\n2    B    A    57\n3    C    A    46\n4    D    A    95\n5    E    A    81\n6    A    B    58\n\n\nBelow, we will plot the heatmap without adding any stylistic elements.\n\n\n\n\nlibrary(tidyverse)\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile() \n\n\n\n\nAs can be seen, each cell (or tile) has a different degree of color fill based on it’s cell value in the Value column of the dataframe df. Brighter and lighter colors represent higher values of the Value column.\nA first step to make this prettier may be to add boundaries between the cells. This can be done by adding a linewidth and a color of this line as follows:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75)\n\n\n\n\nThis looks nicer. Another thing that bugs me is that the default is to produce rectangular cells rather than square cells. This can be fixed by adding coord_equal().\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal()\n\n\n\n\nA next step that I often to is to add the following code to ensure that my cells are centered above each label. In this case, this doesn’t seem to change very much, but I have found it to be useful occasionally:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) \n\n\n\n\nThe next thing that bugs me about this heatmap is that the default color gradient isn’t particularly intuitive to me. I’d rather my values go from a light color (low values) to a darker color (high values). To do this, we can state a low and high color value within scale_fill_continuous(). Here, we go from a very light to a darker purple color.\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\")\n\n\n\n\nNext, I find the axes labels and tick marks annoying, so I can remove these using xlab(\"\"), ylab(\"\"), and axis.ticks() inside theme(). I also increase the size of the labels on the axes.\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2))\n  )\n\n\n\n\nFinally, I’d rather my legend be on the bottom of the heatmap, and we don’t need the label on the legend. This can also be fixed within the theme() argument:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  ) \n\n\n\n\nAs a quick aside - what happens if we have missing values in our Value column? Let’s introduce five random NA values into that column:\n\ndf$Value[sample(1:25,5)]<-NA\nhead(df)\n\n  Var1 Var2 Value\n1    A    A    NA\n2    B    A    57\n3    C    A    46\n4    D    A    95\n5    E    A    81\n6    A    B    NA\n\n\nNow we can plot with the same code as above:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  ) \n\n\n\n\nWhat happens is that these default to a dark-greyish beige color, as seen above. In some circumstances, this color fill will be fine. However, in other situations we might want to dictate the color. Here, we make those NA cells white by adding na.value = \"white\" inside our scale_fill_continuous() .\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\", na.value = \"white\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )\n\n\n\n\n\nExample 2 - Discrete numerical axes.\nAxes don’t have to be categorical. You can use discrete numbers also. They will be plotted in numerical order. Here we produce an example of a matrix which is 56 columns wide and 4 rows tall.\n\nset.seed(101)\ndf1 <- data.frame(Var1=rep(1:6,4),\n                 Var2=rep(1:4,each=6),\n                 Value=sample(1:100, replace=T, 24)\n)\nhead(df1)\n\n  Var1 Var2 Value\n1    1    1    73\n2    2    1    57\n3    3    1    46\n4    4    1    95\n5    5    1    81\n6    6    1    58\n\n\nUsing the same code as above - just changing the colors to a green palette:\n\nggplot(df1, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#ddead1\", high=\"#378805\", na.value = \"white\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )\n\n\n\n\nNote that numeric values don’t show automatically here. This is because of the scale_x_discrete() and scale_y_discrete() lines. We can add the numeric labels by using the continuous scales instead and dictating what the breaks should be if required:\n\nggplot(df1, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_continuous(expand = c(0, 0), breaks=1:6) +\n  scale_y_continuous(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#ddead1\", high=\"#378805\", na.value = \"white\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )\n\n\n\n\n\nExample 3: Correlation Matrices\nA common usage of heatmaps is to illustrate the correlations between a set of continuous variables.\nFirst, we should look at some data. Let’s import the dataset cordata.csv from our folder data_raw. This dataset contains eight continuous variables, boringly named V1, V2,…… V8.\n\ncd <- read.csv(\"data_raw/cordata.csv\")\nhead(cd)\n\n    V1    V2     V3     V4    V5     V6    V7   V8\n1 7.07 34.18 179.62 141.72 14.24 113.47 15.83 1.59\n2 7.43 43.51 107.77 111.40 10.86 139.11 16.76 0.00\n3 1.75  4.74 224.06 113.71 10.65 102.81 22.50 7.29\n4 0.68 16.75  20.00 101.66 16.48 127.23 22.12 5.36\n5 3.15 19.81 251.27 144.41 10.08 125.46 22.34 7.73\n6 3.60 27.98 233.61 137.11 10.02 156.36 24.18 2.18\n\n\nA quick way to get all the correlations between continuous variables in a data.frame is to use cor(). I’m surrounding this function with round() to make the output more easy to read:\n\ncdmat <- round(cor(cd),2)\ncdmat\n\n      V1    V2    V3    V4    V5    V6    V7    V8\nV1  1.00  0.87 -0.26 -0.02  0.15  0.19 -0.75 -0.79\nV2  0.87  1.00 -0.33 -0.15  0.15  0.17 -0.74 -0.92\nV3 -0.26 -0.33  1.00  0.34 -0.81 -0.25  0.44  0.38\nV4 -0.02 -0.15  0.34  1.00 -0.03  0.40  0.03  0.26\nV5  0.15  0.15 -0.81 -0.03  1.00  0.33 -0.30 -0.23\nV6  0.19  0.17 -0.25  0.40  0.33  1.00 -0.39 -0.08\nV7 -0.75 -0.74  0.44  0.03 -0.30 -0.39  1.00  0.64\nV8 -0.79 -0.92  0.38  0.26 -0.23 -0.08  0.64  1.00\n\n\nThis matrix is essentially what we want to plot, however, to do that, we first need to turn it into a dataframe with three columns. The first two being the row and column of the eventual plot and the third being the fill value (the correlation coeffecient). We can melt() the matrix into that dataframe:\n\ncdmat.df <- reshape2::melt(cdmat)\nhead(cdmat.df)\n\n  Var1 Var2 value\n1   V1   V1  1.00\n2   V2   V1  0.87\n3   V3   V1 -0.26\n4   V4   V1 -0.02\n5   V5   V1  0.15\n6   V6   V1  0.19\n\n\nLet’s plot this long data using similar code to above. However, here I’m using scale_fill_gradient2() to set low, mid and high colors at Pearson correlations of -1, 0 and +1 respectively:\n\nggplot(cdmat.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", \n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nThere are three problems with this matrix. First, who cares that the diagonals are all r=1. We don’t need that information. Second, correlation matrices have symmetry along the axis, and so we could just plot either the upper or lower triangle of the matrix. Third, these variables could be reordered to make the relationships between variables be more intuitive.\nLet’s get rid of the diagonal and only keep the lower triangle. We can use the functions diag() and upper.tri() to make the diagonal and top triangle of the matrix NA. Then we melt the matrix again:\n\ndiag(cdmat)<-NA\ncdmat[upper.tri(cdmat)]<-NA\ncdmat\n\n      V1    V2    V3    V4    V5    V6   V7 V8\nV1    NA    NA    NA    NA    NA    NA   NA NA\nV2  0.87    NA    NA    NA    NA    NA   NA NA\nV3 -0.26 -0.33    NA    NA    NA    NA   NA NA\nV4 -0.02 -0.15  0.34    NA    NA    NA   NA NA\nV5  0.15  0.15 -0.81 -0.03    NA    NA   NA NA\nV6  0.19  0.17 -0.25  0.40  0.33    NA   NA NA\nV7 -0.75 -0.74  0.44  0.03 -0.30 -0.39   NA NA\nV8 -0.79 -0.92  0.38  0.26 -0.23 -0.08 0.64 NA\n\n\n\ncdlt.df <- reshape2::melt(cdmat)\nhead(cdlt.df)\n\n  Var1 Var2 value\n1   V1   V1    NA\n2   V2   V1  0.87\n3   V3   V1 -0.26\n4   V4   V1 -0.02\n5   V5   V1  0.15\n6   V6   V1  0.19\n\n\nWe can plot this in the same way as before but adding na.value=\"white\" inside the scale_fill_gradient2() to white out the NA values, leaving the bottom of the matrix.\n\nggplot(cdlt.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       na.value=\"white\",\n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nTo reorder the matrix, we first need to recreate our original correlation matrix.\n\ncdmat1 <- round(cor(cd),2)\ncdmat1\n\n      V1    V2    V3    V4    V5    V6    V7    V8\nV1  1.00  0.87 -0.26 -0.02  0.15  0.19 -0.75 -0.79\nV2  0.87  1.00 -0.33 -0.15  0.15  0.17 -0.74 -0.92\nV3 -0.26 -0.33  1.00  0.34 -0.81 -0.25  0.44  0.38\nV4 -0.02 -0.15  0.34  1.00 -0.03  0.40  0.03  0.26\nV5  0.15  0.15 -0.81 -0.03  1.00  0.33 -0.30 -0.23\nV6  0.19  0.17 -0.25  0.40  0.33  1.00 -0.39 -0.08\nV7 -0.75 -0.74  0.44  0.03 -0.30 -0.39  1.00  0.64\nV8 -0.79 -0.92  0.38  0.26 -0.23 -0.08  0.64  1.00\n\n\nNext, we can use a clustering method such as hierarchical clustering to identify the relationships between each variable:\n\ndd <- as.dist((1-cdmat1)/2)\nhc <- hclust(dd)\ncdmat1 <-cdmat1[hc$order, hc$order]\ncdmat1\n\n      V3    V7    V8    V4    V6    V5    V1    V2\nV3  1.00  0.44  0.38  0.34 -0.25 -0.81 -0.26 -0.33\nV7  0.44  1.00  0.64  0.03 -0.39 -0.30 -0.75 -0.74\nV8  0.38  0.64  1.00  0.26 -0.08 -0.23 -0.79 -0.92\nV4  0.34  0.03  0.26  1.00  0.40 -0.03 -0.02 -0.15\nV6 -0.25 -0.39 -0.08  0.40  1.00  0.33  0.19  0.17\nV5 -0.81 -0.30 -0.23 -0.03  0.33  1.00  0.15  0.15\nV1 -0.26 -0.75 -0.79 -0.02  0.19  0.15  1.00  0.87\nV2 -0.33 -0.74 -0.92 -0.15  0.17  0.15  0.87  1.00\n\n\nWe then do the same process of adding NA to the diagonal and upper triangle of the matrix, and we can plot:\n\ndiag(cdmat1)<-NA\ncdmat1[upper.tri(cdmat1)]<-NA\ncdlt1.df <- reshape2::melt(cdmat1)\n\nggplot(cdlt1.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       na.value=\"white\",\n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nOne final step that we might want to do is to add the actual correlations over the top of the colored cells. We can add this with geom_text().\n\nggplot(cdlt1.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  geom_text(aes(Var1, Var2, label = value), color = \"black\", size = 3.5) +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       na.value=\"white\",\n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  ) \n\n\n\n\n\n\nSome practical examples\nBelow are some well known examples of using geom_tile() to create heatmaps examining trends in the prevalence of diseseas over time. First, we’ll look at the effect of birth month on risk of developing schizophrenia in an Australian cohort. This is using the schz dataset from the season R package:\n\nschz <- read.csv(\"data_raw/schz.csv\")\nhead(schz)\n\n  year month    yrmon NBirths SczBroad  SOI\n1 1930     1 1930.000    1578        8 12.7\n2 1930     2 1930.083    1519       11  7.7\n3 1930     3 1930.167    1630       15  1.8\n4 1930     4 1930.250    1607       12 -3.8\n5 1930     5 1930.333    1566       10  2.1\n6 1930     6 1930.417    1491        8 -5.5\n\nrange(schz$year)\n\n[1] 1930 1971\n\n\nEach row of this dataset contains information on the incidence of schizophrenia for individuals born for each month of the year between 1930-1971. We use the column SczBroad as a measure of schizophrenia risk at each timepoint.\nWe plot the data below using similar code to above. In addition, we are using scale_fill_viridis() from the viridis R package to fill our tiles from a gradient of dark purple (low risk) to bright yellow (high risk). We are using option D, one of four colorblind friendly palettes available in this package. Within theme() most of the lines are making the background panel and borders a dark gray color (gray10), and adjusting the placement of text labels.\n\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nggplot(schz, aes(year, month, fill = SczBroad)) + \n  geom_tile(colour=\"gray10\", linewidth=1.1) + \n  coord_equal() +\n  scale_fill_viridis(option=\"D\",na.value = \"gray10\") +\n  scale_y_continuous(breaks=1:12, labels=month.abb[1:12])+\n  xlab(\"\") + \n  ylab(\"\") +\n  ggtitle(\"Schizophrenia Risk By Birth Month and Year in Australia\") +\n  theme(\n    plot.title = element_text(color=\"white\",hjust=0,vjust=1, size=rel(1.3)),\n    plot.background = element_rect(fill=\"gray10\"),\n    panel.background = element_rect(fill=\"gray10\"),\n    panel.border = element_rect(fill=NA,color=\"gray10\", linewidth = 0.5, linetype=\"solid\"),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"white\", size=rel(0.8)),\n    axis.text.y  = element_text(hjust=1, margin = margin(r = -20)),\n    legend.text = element_text(color=\"white\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"gray10\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )"
  }
]