[
  {
    "objectID": "areacharts.html#waffle-charts",
    "href": "areacharts.html#waffle-charts",
    "title": "9  Area Charts",
    "section": "9.1 Waffle Charts",
    "text": "9.1 Waffle Charts\nWaffle charts are square grid based plots that convert frequencies or proportions to different numbers of squares. These are easier to interpret than their pie chart cousins. Let’s see an example:\nHere we have 7 groups and associated frequencies in each group.\n\nset.seed(10)\nx <- round(runif(7, 1, 100),0)\nnames(x) <- LETTERS[1:7]\n\nx\n\n A  B  C  D  E  F  G \n51 31 43 70  9 23 28 \n\n\nTo make the basic waffle plot, we can just use the function waffle() on a numerical vector:\n\nlibrary(waffle)\nwaffle(x)\n\n\n\n\nIn this default plot, waffle is using one square to represent each value. However, we can control this more effectively. First, we could divide our own vector by 5 such that each square represents 5. We can also specify the number of rows we wish to plot the data on:\n\nwaffle(x/5, rows=6)\n\n\n\n\nDigging into this a bit more. Group A has 10 squares each worth 5 which makes 50. This is 1 less than the 51 in group A. Group E only has one square (worth 5) when it’s value was 9. On the other hand, group G has 5 squares worth 25, when it’s value was 28. So, it can be seen that some artistic license has been made in the creation of the blocks in the waffle chart. This may be problematic in some representations of data, but may be perfectly fine in others. As an aside, I discuss the issues of aportionment (determining how to deal with left overs of fractions when grouping variables) in a blog post here.\nThe function waffle() also has some other functionality such as user-defining the colors to be used and the legend position:\n\nwaffle(x/5, rows = 6,\n       colors = c(\"#f9f988\",\"#f6be68\",\"#e1875e\",\"#ba585c\",\n                           \"#853357\",\"#491b49\",\"#0a0431\"\n       ),\n       legend_pos = \"bottom\")\n\n\n\n\n\n\n9.1.1 geom_waffle()\nThere are a lot of other interesting functionalities in the waffle package. Notably, we can use the function geom_waffle() in conjunction with other ggplot2 functions to create elegant plots. Note, that I have sometimes found that you need to install the developmental version of waffle directly from GitHub to get some of these to work.\n\n#remotes::install_github(\"hrbrmstr/waffle\")\nlibrary(waffle)\n\ninsert waffle examples here -\n-small multiples -alpha transparency -changing borders and sizes\n\n\n\n9.1.2 Combining waffles with pictograms\nSometimes a fun way to represent data in a waffle chart is to use some pictogram instead of a square. Below are a few examples.\nWaffles + Icons\nThere are a few ways to add icons to waffles.\nHere are some data showing the proportion of US people that have different eye colors.\n\neyecolor <- c(45,27,18,9,1)\nnames(eyecolor) <- c(\"Brown\", \"Blue\", \"Hazel\", \"Green\",\"Other\")\n\n\nMaybe include ggwaffle linked here\n\nWaffles + Phylopics\nThe below is an example of using the package rphylopic to use elephant images within a waffle chart. (Need to look up my code for how to do this):\n\n\n\n\n9.1.3 Practical Example - waffle charts\nThis practical example of how to use waffle charts is taken directly from Bob Rudis’s guide on waffle charts. It uses the storms dataset which is available in the dplyr package. It describes the frequencies of different types of storm across different years.\n\nlibrary(tidyverse)\n\nstorms_df <- storms %>%\n  filter(year >= 2010) %>%\n  count(year, status) \n\nstorms_df\n\n# A tibble: 89 x 3\n    year status                     n\n   <dbl> <fct>                  <int>\n 1  2010 disturbance                7\n 2  2010 extratropical             52\n 3  2010 hurricane                163\n 4  2010 other low                152\n 5  2010 subtropical depression     1\n 6  2010 subtropical storm          4\n 7  2010 tropical depression       72\n 8  2010 tropical storm           212\n 9  2011 disturbance               10\n10  2011 extratropical             55\n# ... with 79 more rows\n\n\n\nlibrary(waffle)\nlibrary(ggthemes)\n\nggplot(storms_df, aes(fill = status, values = n)) +\n  geom_waffle(color = \"white\", size = .25, n_rows = 10, flip = TRUE) +\n  facet_wrap(~year, nrow = 1, strip.position = \"bottom\") +\n  scale_x_discrete() +\n  scale_y_continuous(labels = function(x) x * 10, # make this multiplyer the same as n_rows\n                     expand = c(0,0)) +\n  ggthemes::scale_fill_tableau(name=NULL) +\n  coord_equal() +\n  labs(\n    title = \"Faceted Waffle Bar Chart\",\n    subtitle = \"{dplyr} storms data\",\n    x = \"Year\",\n    y = \"Count\"\n  ) +\n  theme_minimal(base_family = \"Roboto Condensed\") +\n  theme(panel.grid = element_blank(), axis.ticks.y = element_line()) +\n  guides(fill = guide_legend(reverse = TRUE))"
  },
  {
    "objectID": "areacharts.html#pie-charts",
    "href": "areacharts.html#pie-charts",
    "title": "9  Area Charts",
    "section": "9.2 Pie Charts",
    "text": "9.2 Pie Charts\nWhy are pie charts bad? Basically humans are very bad at estimating quantities based on angles - and pie charts (and donut charts) use slices. This can lead to situations in which we perceive groups to have equivalent areas, but they do not. This is particularly a problem when we are plotting data including more than 2 groups. Much more often, we can represent the data more efficiently using a bar graph.\nFor example,\ninsert bad pie chart example and bar graph improvement.\n\n9.2.1 Pie charts with two groups\nThe one exception to the “pie charts are bad” rule may be if we are representing proportions between two groups, especially when we wish to compare across a number of different subjects. For example (include example):"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PsyDataViz",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.\nMaybe I should add a pretty picture in here ?"
  },
  {
    "objectID": "intro.html#introduction-to-ggplot2",
    "href": "intro.html#introduction-to-ggplot2",
    "title": "1  Introduction",
    "section": "1.1 Introduction to ggplot2",
    "text": "1.1 Introduction to ggplot2\nThe first thing to do when we want to make a visualization with ggplot2 is to load the tidyverse:\n\nlibrary(tidyverse)\n\nNext, let’s load in some data. We’ll pick the BlueJays.csv data:\n\ndf <- read_csv(\"data_raw/BlueJays.csv\")\nhead(df)\n\n# A tibble: 6 x 9\n  BirdID     KnownSex BillDepth BillWidth BillLength  Head  Mass Skull   Sex\n  <chr>      <chr>        <dbl>     <dbl>      <dbl> <dbl> <dbl> <dbl> <dbl>\n1 0000-00000 M             8.26      9.21       25.9  56.6  73.3  30.7     1\n2 1142-05901 M             8.54      8.76       25.0  56.4  75.1  31.4     1\n3 1142-05905 M             8.39      8.78       26.1  57.3  70.2  31.2     1\n4 1142-05907 F             7.78      9.3        23.5  53.8  65.5  30.3     0\n5 1142-05909 M             8.71      9.84       25.5  57.3  74.9  31.8     1\n6 1142-05911 F             7.28      9.3        22.2  52.2  63.9  30       0\n\n\nIn the next few steps, we’ll slowly build up a plot using ggplot2. This is not how you would typically write the code. However, it is worth going step by step, just to show you the logic behind the code.\nIf we just run the function ggplot() notice that all we get is a blank gray canvas. R knows that we want to make a plot, but it has no idea what type of plot or with what data - so it just throws up the canvas:\n\nggplot()  \n\n\n\n\nNow, if we add the dataset to ggplot(), it still only gives us the blank canvas. It now knows we want to make a graph from the dataset called df but doesn’t plot anything yet as we didn’t tell it what to plot:\n\nggplot(df)   \n\n\n\n\nFor R to ‘know’ what you are trying to plot, you need to use aes(). You put that most of the time inside ggplot() after your dataframe name. (There are exceptions to this, but let’s not worry about that yet). Inside the aes() we’ll put what columns contain our data for the x and y axes. We may also refer to other columns inside aes() if we wish to modify the color or shape or something else about our data based on the values in some column.\nFor our first example, let’s make a scatterplot of body mass against head size of these Blue Jays. If you look at the original dataset, you’ll notice that both the Mass and Head columns contain continuous numeric data (i.e. they are numbers).\nIn the code below, we are telling aes() to plot the Mass data on the x-axis and to plot the Head data on the y-axis.\n\nggplot(df, aes(x=Mass, y=Head) )   \n\n\n\n\nSomething did change this time. We get a plot with labels on the x- and y-axes. It recognizes that we wish to plot Mass and Head data. It even knows the range of our data on each axis. For instance, it knows that the Mass data lies somewhere between 55 and 85. However, we haven’t yet told it precisely what type of plot we want to make (it doesn’t just assume that we wanted to make a scatterplot - it can’t read our minds).\nSo our next step is to tell it to make a scatterplot by adding points to the graph. We tell ggplot() what we are adding to the chart by using different geoms. For a scatterplot, the geom we require is geom_point() - that means add datapoints. It is hard to remember all the different geoms, but you can just look them up.\nHere is how we add datapoints to our graph with + geom_point().\n\nggplot(df, aes(x=Mass, y=Head) ) + geom_point()\n\n\n\n\nThat is our first ggplot graph! It looks pretty good. The amazing thing about ggplot is almost everything you are looking at on that graph can be customized to your preferred design choice. We’ll discuss several of these customizations throughout this chapter. First, let’s talk about changing the color of the datapoints. Inside of geom_point() we can change the color of all the points like this:\n\nggplot(df, aes(x=Mass, y=Head) ) + geom_point(color=\"red\")\n\n\n\n\nThis made the points red. Just make sure you put a recognized color name (you can look them up here) or a recognized hex code. Notice though that color name must be put inside of quotes.\nWhat if we want to color the points based on another variable? For example, instead of having all of our data points be red, say we want them to be colored based on whether the birds or male or female? The column that has the information about whether the birds are male or female is KnownSex. Because we are basing the color on a column, we put that information inside of aes() with color = KnownSex. We don’t put that inside geom_point(). This code looks like this:\n\nggplot(df, aes(x=Mass, y=Head, color = KnownSex) ) + geom_point() \n\n\n\n\n\n\n1.1.1 Assigning plots\nWhen we make plots, our code can start to get quite long as we make more and more additions or changes to the plot. One very useful thing to know is that we can assign our plot to be an object, just as we would with a vector or a dataframe. For instance, let’s remake the plot above, but this time we’ll assign it the name p. We do that using p <-.\n\np <- ggplot(df, aes(x=Mass, y=Head, color = KnownSex) ) + geom_point() \n\nNow, whenever we type and run p we will get our plot. e.g.\n\np\n\n\n\n\n\n\n\n1.1.2 Titles and Axes Titles\nThe advantage of assigning our plots to a short name, is that we can add things with less code. In R, if we wish to add a title to a plot, we do this with + ggtitle(). So, here is how we add a title to our above plot:\n\np + ggtitle(\"Our first scatterplot\")\n\n\n\n\nThe above plot is basically the same as writing:\n\nggplot(df, aes(x=Mass, y=Head, color = KnownSex) ) + \n  geom_point() +\n  ggtitle(\"Our First Scatterplot\")\n\n\n\n\nYou’ll notice that we are chaining together commands with the +. This is similar to how we chain together commands with the %>% when doing data carpentry. ggplot() instead chains with the +. Again, be careful not to start a row with a +, and you must end a row with a + unless it’s the very last row.\nTo change the title of the x-axis or the y-axis, we use xlab and ylab respectively. We can do it like this:\n\np + xlab(\"Body Mass (g)\") + ylab(\"Head Size (mm)\")\n\n\n\n\n\n\n\n1.1.3 Colors, Shapes and Sizes\nR recognizes many default color names. These can be found at either of these places:\n Color names 1  Color names 2  Or, you can use a hex code \nHere we use the color dodgerblue to change all the points to that color:\n\nggplot(df, aes(x=Mass, y=Head) ) + geom_point(color=\"dodgerblue\")\n\n\n\n\nHere we change the points to the color #ababcc using a hexcode - note that hexcodes need to have # in front of them:\n\nggplot(df, aes(x=Mass, y=Head) ) + geom_point(color=\"#ababcc\")\n\n\n\n\nYou can also change the shape of the points you plot with geom_point(pch = ). You need to insert the appropriate number according to this guide:\n\nFor example, to have dodgerblue asterisks, we add pch = 8, separating the color and shape commands by a comma:\n\nggplot(df, aes(x=Mass, y=Head) ) + geom_point(color=\"dodgerblue\", pch = 8)\n\n\n\n\nFinally, we can change the size of our datapoints (or other shape we choose), using size =:\n\nggplot(df, aes(x=Mass, y=Head) ) + geom_point(color=\"purple\", size=2)\n\n\n\n\n\n\n\n1.1.4 Themes\nDefault Themes\nYou may have noticed that every plot we have made so far has the same gray background with faint white gridlines. This is the default setting for the look of ggplot() graphs. There are several other themes that are available to us that change the overall appearance of our plots. Some of these are listed below:\ntheme_bw() a variation on theme_grey() that uses a white background and thin grey grid lines.\ntheme_linedraw() A theme with only black lines of various widths on white backgrounds, reminiscent of a line drawing.\ntheme_light() similar to theme_linedraw() but with light grey lines and axes, to direct more attention towards the data.\ntheme_dark() the dark cousin of theme_light(), with similar line sizes but a dark background. Useful to make thin colored lines pop out.\ntheme_minimal() A minimalistic theme with no background annotations.\ntheme_classic() A classic-looking theme, with x and y axis lines and no gridlines.\ntheme_void() A completely empty theme\nLet’s shows a couple of these different themes. The theme that we use the most in this course is theme_classic(). This is how you would apply this theme to your plot:\n\nggplot(df, aes(x=Mass, y=Head) ) + \n  geom_point() +\n  theme_classic()\n\n\n\n\nIt creates a very sleek simple graph. The downside to this type of graph is that it does get rid of the gridlines which can be helpful sometimes.\nAnother theme that we use often is theme_minimal(). Here is how we would add this:\n\nggplot(df, aes(x=Mass, y=Head) ) + \n  geom_point() +\n  theme_minimal()\n\n\n\n\nThis theme is also simplistic, but has gridlines too.\n\nCustom themes\nRather than changing many different aspects of the graph at once, we can change individual things one by one with theme(). We don’t propose to cover this in more detail in this book - for more information about themes look here - however, here is one quick example.\nLet’s say we wanted to make the panel background light blue instead of gray. We could do it like this:\n\nggplot(df, aes(x=Mass, y=Head) ) + \n  geom_point() +\n  theme(panel.background = element_rect(fill = \"lightblue\"))\n\n\n\n\nAgain, this can get quite complicated - so stick with the default themes if you want to change your plots up a bit, or go to other help guides or later chapters in this book for more fine detail on customization."
  },
  {
    "objectID": "scatterplots.html#basic-scatterplots",
    "href": "scatterplots.html#basic-scatterplots",
    "title": "2  Scatterplots",
    "section": "2.1 Basic Scatterplots",
    "text": "2.1 Basic Scatterplots\nAs we showed earlier, geom_point is used to add datapoints to scatter plots. We’ll do this for the cheese.csv dataset, that contains nutritional information about various cheeses:\n\nlibrary(tidyverse)\ncheese <- read_csv(\"data_raw/cheese.csv\")\nhead(cheese)\n\n# A tibble: 6 x 9\n  type      sat_fat polysat_fat monosat_fat protein  carb  chol fiber  kcal\n  <chr>       <dbl>       <dbl>       <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>\n1 blue         18.7       0.8          7.78    21.4  2.34    75     0   353\n2 brick        18.8       0.784        8.60    23.2  2.79    94     0   371\n3 brie         17.4       0.826        8.01    20.8  0.45   100     0   334\n4 camembert    15.3       0.724        7.02    19.8  0.46    72     0   300\n5 caraway      18.6       0.83         8.28    25.2  3.06    93     0   376\n6 cheddar      21.1       0.942        9.39    24.9  1.28   105     0   403\n\n\nWe’ll start with a simple scatterplot looking at the association between saturated fat on the x-axis and cholesterol on the y-axis intake.\n\nggplot(cheese, aes(x=sat_fat, y=chol) ) + \n  geom_point()\n\n\n\n\nWe can change the color of the points by adding a color inside of geom_point - making sure that the color name is in quotes:\n\nggplot(cheese, aes(x=sat_fat, y=chol) ) + \n  geom_point(color = \"purple\")\n\n\n\n\nTo add a straight trendline through the data we use + stat_smooth(method = \"lm\"). The stat_smooth bit tells it to add a trendline, and the method=\"lm\" bit in the middle is telling it to make the straight line:\n\nggplot(cheese, aes(x=sat_fat, y=chol) ) + \n  geom_point(color = \"purple\") +\n stat_smooth(method = \"lm\")\n\n\n\n\nHere you can see it automatically puts a shaded area around your trendline, which represents a confidence interval around the trendline. There is a way to remove it by adding se = FALSE or se = F inside of stat_smooth():\n\nggplot(cheese, aes(x=sat_fat, y=chol) ) + \n  geom_point(color = \"purple\") +\n stat_smooth(method = \"lm\", se = FALSE)\n\n\n\n\nYou can also change the color of the trendline, by adding to stat_smooth\n\nggplot(cheese, aes(x=sat_fat, y=chol) ) + \n  geom_point(color = \"purple\") +\n  stat_smooth(method = \"lm\", se= F, color = \"black\")\n\n\n\n\nAs with all ggplot2 graphs, you can customize the plot. For example changing the theme, adding a title and axes titles:\n\nggplot(cheese, aes(x=sat_fat, y=chol) ) + \n  geom_point(color = \"purple\") +\n  stat_smooth(method = \"lm\", se= F, color = \"black\") +\n  xlab(\" Saturated Fat\") +\n  ylab(\"Cholesterol\") +\n  ggtitle(\"Saturated Fat vs Cholesterol\") +\n  theme_minimal()\n\n\n\n\nIf you wish to change the color of the points based on a grouping variable, then we need to put our color= into the aes(). You then need to provide the column that has the color grouping variable. For example, to change the color of points in our plot of body mass against head size in Blue Jays based on the sex of birds:\n\ndf <- read_csv(\"data_raw/BlueJays.csv\")\n\nRows: 123 Columns: 9\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (2): BirdID, KnownSex\ndbl (7): BillDepth, BillWidth, BillLength, Head, Mass, Skull, Sex\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(df)\n\n# A tibble: 6 x 9\n  BirdID     KnownSex BillDepth BillWidth BillLength  Head  Mass Skull   Sex\n  <chr>      <chr>        <dbl>     <dbl>      <dbl> <dbl> <dbl> <dbl> <dbl>\n1 0000-00000 M             8.26      9.21       25.9  56.6  73.3  30.7     1\n2 1142-05901 M             8.54      8.76       25.0  56.4  75.1  31.4     1\n3 1142-05905 M             8.39      8.78       26.1  57.3  70.2  31.2     1\n4 1142-05907 F             7.78      9.3        23.5  53.8  65.5  30.3     0\n5 1142-05909 M             8.71      9.84       25.5  57.3  74.9  31.8     1\n6 1142-05911 F             7.28      9.3        22.2  52.2  63.9  30       0\n\nggplot(df, aes(x=Mass, y=Head, color = KnownSex) ) + \n  geom_point() \n\n\n\n\nIf you wish to customize the colors of your datapoints, then you need to add scale_color_manual() like this:\n\nggplot(df, aes(x=Mass, y=Head, color = KnownSex) ) + \n  geom_point() +\n  scale_color_manual(values = c(\"darkorange\", \"steelblue2\")) +\n  theme_classic()\n\n\n\n\nIf you have a lot of points on your scatterplot, it can get quite hard to see all the datapoints. One way to deal with this is to change the transparency of the points. You can do this by adjusting the alpha level inside of geom_point(). alpha= ranges from 0 to 1, with 0 being fully transparent and 1 being fully solid.\n\nggplot(df, aes(x=Mass, y=Head, color = KnownSex) ) + \n  geom_point(alpha=.4) +\n  scale_color_manual(values = c(\"darkorange\", \"steelblue2\")) +\n  theme_classic()"
  },
  {
    "objectID": "scatterplots.html#multiple-groups-on-a-scatterplot",
    "href": "scatterplots.html#multiple-groups-on-a-scatterplot",
    "title": "2  Scatterplots",
    "section": "2.2 Multiple Groups on a Scatterplot",
    "text": "2.2 Multiple Groups on a Scatterplot\nWe can add multiple trendlines to each group of datapoints plotted on a scatterplot. Let’s look at the following data of the chemical components of different olive oils produced in Italy. This is what the data look like:\n\nolives <- read_csv(\"data_raw/olives.csv\")\nhead(olives)\n\n# A tibble: 6 x 10\n  macro.a~1 region palmi~2 palmi~3 stearic oleic linol~4 linol~5 arach~6 eicos~7\n  <chr>     <chr>    <dbl>   <dbl>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 South     Apuli~    1075      75     226  7823     672      36      60      29\n2 South     Apuli~    1088      73     224  7709     781      31      61      29\n3 South     Apuli~     911      54     246  8113     549      31      63      29\n4 South     Apuli~     966      57     240  7952     619      50      78      35\n5 South     Apuli~    1051      67     259  7771     672      50      80      46\n6 South     Apuli~     911      49     268  7924     678      51      70      44\n# ... with abbreviated variable names 1: macro.area, 2: palmitic,\n#   3: palmitoleic, 4: linoleic, 5: linolenic, 6: arachidic, 7: eicosenoic\n\n\nIf we use table(), we can see how many different regions are represented in the data. There are three unique Italian areas where the olives come from:\n\ntable(olives$macro.area)\n\n\nCentre.North     Sardinia        South \n         151           98          323 \n\n\nSay we are interested in looking at how oleic and linoleic acid contents are related to each other by macro.area:\n\nggplot(olives, aes(x=oleic, y=linoleic, color=macro.area)) +\n  geom_point() +\n  theme_classic()\n\n\n\n\n\nIf we wanted to add a trendline for each area, all we need to do is add our stat_smooth(method=\"lm) line to the code. It already knows to plot these as separate trendlines for each group because inside aes() we have color=macro.area. As long as there is a group= or color= inside aes() then it knows to do things like adding trendlines separately for each group:\n\nggplot(olives, aes(x=oleic, y=linoleic, color=macro.area)) +\n  geom_point() +\n  stat_smooth(method=\"lm\", se=F) +\n  theme_classic()"
  },
  {
    "objectID": "scatterplots.html#bubble-charts",
    "href": "scatterplots.html#bubble-charts",
    "title": "2  Scatterplots",
    "section": "2.3 Bubble Charts",
    "text": "2.3 Bubble Charts\nBubble Charts are an extension to scatterplots. In scatterplots we plot two continuous variables against each other. With a bubble chart we add a third continuous variable and vary the size of our datapoints according to this variable. For example, say we wish to also plot skull size on our Blue Jay scatterplot. We could increase the size of the points for individuals with larger skull sizes. We do this by adding size=Skull into our aes() part:\n\nggplot(df, aes(x=Mass, y=Head, color = KnownSex, size = Skull) ) + \n  geom_point(alpha=.4) +\n  scale_color_manual(values = c(\"darkorange\", \"steelblue2\")) +\n  theme_classic()\n\n\n\n\nThe issue with bubble charts is that they can start to look very cluttered, making it hard to actually see any patterns. They should probably be used sparingly. One trick you can employ to make them a little easier to see is to add scale_size() to the plot. Here, you enter two numbers to tell it what size points to scale to. In our example below, we used scale_size(range = c(.1, 4)) which makes our points range between sizes 0.1 and 4. This makes the plot a little less busy:\n\nggplot(df, aes(x=Mass, y=Head, color = KnownSex, size = Skull) ) + \n  geom_point(alpha=.4) +\n  scale_color_manual(values = c(\"darkorange\", \"steelblue2\")) +\n  theme_classic() +\n  scale_size(range = c(.1, 4))"
  },
  {
    "objectID": "lines.html#basic-line-graphs",
    "href": "lines.html#basic-line-graphs",
    "title": "3  Line Graphs",
    "section": "3.1 Basic Line Graphs",
    "text": "3.1 Basic Line Graphs\nLet’s look at the jennifer.csv dataset:\n\nlibrary(tidyverse)\njennifer <- read_csv(\"data_raw/jennifer.csv\")\nhead(jennifer)\n\n# A tibble: 6 x 5\n   year sex    name         n       prop\n  <dbl> <chr>  <chr>    <dbl>      <dbl>\n1  1916 Female Jennifer     5 0.00000461\n2  1919 Female Jennifer     6 0.00000511\n3  1920 Female Jennifer     7 0.00000563\n4  1921 Female Jennifer     5 0.00000391\n5  1922 Female Jennifer     7 0.00000561\n6  1923 Female Jennifer     9 0.00000719\n\n\nThis dataset shows the number n of children born each year (year) in the United States with the name Jennifer. In 1916 there were five children born with the name Jennifer. In 1917 there were 0. In 1923 there were 9.\nThis dataset goes up to 2017 where there were 1052 children born with the name Jennifer:\n\ntail(jennifer)\n\n# A tibble: 6 x 5\n   year sex    name         n     prop\n  <dbl> <chr>  <chr>    <dbl>    <dbl>\n1  2012 Female Jennifer  1923 0.000993\n2  2013 Female Jennifer  1689 0.000878\n3  2014 Female Jennifer  1521 0.000779\n4  2015 Female Jennifer  1283 0.000660\n5  2016 Female Jennifer  1159 0.000601\n6  2017 Female Jennifer  1042 0.000556\n\n\nTherefore, we have a continuous variable (n) and a time variable (year). We can plot these as we would plot a scatterplot by supplying year to our x-axis and n to our y-axis. We could then add datapoints with geom_point() essentially making a scatterplot:\n\nggplot(jennifer, aes(x=year, y=n) ) + geom_point() \n\n\n\n\nBut, we aren’t dealing with just a scatterplot. These datapoints can be connected to each other as they are ordered in time. Instead of using geom_point() we can use geom_line() to draw a line instead:\n\nggplot(jennifer, aes(x=year, y=n) ) + geom_line()\n\n\n\n\nIf you so desired, you could plot both the points and lines together:\n\nggplot(jennifer, aes(x=year, y=n) ) + \n  geom_point() +  \n  geom_line() \n\n\n\n\nYou can adjust the colors of the lines and the points independently by supplying color= inside of each geom:\ne.g. Changing the color of the line, but not the points:\n\nggplot(jennifer, aes(x=year, y=n) ) + \n  geom_point() +\n  geom_line(color = \"purple\") \n\n\n\n\nChanging the color of both the points and the line:\n\nggplot(jennifer, aes(x=year, y=n) ) + \n  geom_point(color = \"violet\") +\n  geom_line(color = \"purple\") \n\n\n\n\nYou can also change the width of lines by adding lwd= to geom_line():\n\nggplot(jennifer, aes(x=year, y=n) ) + \n  geom_line(color = \"purple\", lwd=2)\n\n\n\n\nThere are also several different styles of lines. You can change these by adjusting the number you provide to lty= inside of geom_line(). Here are a few examples:\n\nggplot(jennifer, aes(x=year, y=n) ) + geom_line(lty=2)\n\n\n\n\n\nggplot(jennifer, aes(x=year, y=n) ) + geom_line(lty=3)\n\n\n\n\nThis illustration shows some of the linetype options:\n\nJust a quick reminder: Please only connect datapoints into a line if it is meaningful to do so! This is almost always when your x-axis is some measure of time."
  },
  {
    "objectID": "lines.html#multiple-line-graphs",
    "href": "lines.html#multiple-line-graphs",
    "title": "3  Line Graphs",
    "section": "3.2 Multiple Line Graphs",
    "text": "3.2 Multiple Line Graphs\nOften we wish to compare the patterns over time of different groups. We can do that by plotting multiple lines on the same graph.\nLet’s look at this example dataset.\n\njenlinda <- read_csv(\"data_raw/jenlinda.csv\")\ntail(jenlinda)\n\n# A tibble: 6 x 5\n   year sex    name         n     prop\n  <dbl> <chr>  <chr>    <dbl>    <dbl>\n1  2015 Female Jennifer  1283 0.000660\n2  2015 Female Linda      425 0.000218\n3  2016 Female Jennifer  1159 0.000601\n4  2016 Female Linda      436 0.000226\n5  2017 Female Jennifer  1042 0.000556\n6  2017 Female Linda      404 0.000215\n\n\nHere, we have data in long format. We still have our continuous outcome variable of n in one column. We also have year in another column. So we can plot these two against each other. Importantly, we can split our lines based on our grouping variable, which is the name column. In that column we have two different groups - Jennifer and Linda.\nTo plot separate lines based on the name column, we need to add group=name to our aes(). We’ve also added some custom labels, titles and a theme.\n\nggplot(jenlinda, aes(x=year, y=n, group=name)) + \n  geom_line()+\n  xlab(\"Year\") +\n  ylab(\"Number of Children Born\") +\n  ggtitle(\"Popularity of Names Jennifer & Linda in USA\") +\n  theme_minimal()\n\n\n\n\nYou may notice that both lines are the same color! To make the lines have different colors, we insert color=name into the aes() instead of group=name:\n\nggplot(jenlinda, aes(x=year, y=n, color=name)) + \n  geom_line()+\n  xlab(\"Year\") +\n  ylab(\"Number of Children Born\") +\n  ggtitle(\"Popularity of Names Jennifer & Linda in USA\") +\n  theme_minimal()\n\n\n\n\nAgain, we could customize these colors if we did not like them with scale_color_manual() like this:\n\nggplot(jenlinda, aes(x=year, y=n, color=name)) + \n  geom_line()+\n  xlab(\"Year\") +\n  ylab(\"Number of Children Born\") +\n  ggtitle(\"Popularity of Names Jennifer & Linda in USA\") +\n  theme_classic() +\n  scale_color_manual(values=c(\"#ffadf3\", \"#800f4f\"))\n\n\n\n\nJust insert your favorite colors, and make sure you provide the same number of colors as you have separate groups/lines."
  },
  {
    "objectID": "histograms.html#histograms-with-ggplot2",
    "href": "histograms.html#histograms-with-ggplot2",
    "title": "4  Histograms",
    "section": "4.1 Histograms with ggplot2",
    "text": "4.1 Histograms with ggplot2\nTo describe how to make histograms with the ggplot() function, lets look at the films.csv dataset.\n\nlibrary(tidyverse)\nfilm <- read_csv(\"data_raw/films.csv\")\nhead(film)\n\n# A tibble: 6 x 5\n  film                     year rottentomatoes  imdb metacritic\n  <chr>                   <dbl>          <dbl> <dbl>      <dbl>\n1 Avengers: Age of Ultron  2015             74   7.8         66\n2 Cinderella               2015             85   7.1         67\n3 Ant-Man                  2015             80   7.8         64\n4 Do You Believe?          2015             18   5.4         22\n5 Hot Tub Time Machine 2   2015             14   5.1         29\n6 The Water Diviner        2015             63   7.2         50\n\n\nThis dataset contains 146 rows of data. Each row has a unique film, with the final three columns giving three different ratings measures of how good the film was. These are their respective rottentomatoes, imdb and metacritic scores.\nIf we wished to plot the distribution of imdb scores, we need to put x=imdb inside the aes() part of the ggplot code. That is to tell it to plot these scores on the x-axis. We do not need to put a y= inside this, as we are not plotting anything from our dataset on the y-axis. Instead, ggplot2 will count up the frequency of our scores between regular intervals of imdb scores.\nWe then add + geom_histogram() to tell it to make a histogram. All together it looks like this:\n\nggplot(film, aes(x=imdb)) + \n  geom_histogram()  \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nNow, this doesn’t look great and we have several problems with it. The two major problems that we get with our first histograms are. 1) The binwidth is almost never appropriate. We need to tell ggplot exactly what we want the binwidth on the x-axis to be. That is, what interval do we want our scores to be counted over. Looking at the graph, our scores range from just below 4 to about 8.6. Perhaps a better interval would be 0.2, so we count how many films had scores between 3.6-3.8, 3.8-4.0, 4.0-4.2, 4.2-4.4, …….. 8.4-8.6, 8.6-8.8 etc. 2) Having black bars makes it really hard to distinguish the bars when they are close in heights. We need to fix the color scheme.\nOK, let’s make the bars dodgerblue and border them white. Inside geom_histogram() we use color=\"white\" to represent the outside lines of the bars. We use fill=\"dodgerblue to indicate the color inside the bars should be dodgerblue.\n\nggplot(film, aes(x=imdb)) + \n  geom_histogram(color=\"white\", fill=\"dodgerblue\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nNow let’s fix that binwidth. To resolve this, inside geom_histogram() we write binwidth = 0.2.\n\nggplot(film, aes(x = imdb)) + \n  geom_histogram(binwidth = 0.2, color=\"white\", fill=\"dodgerblue\") \n\n\n\n\nThis looks a lot better. Now we can see that the majority of films have ratings in the 6.2-7.8 range, with relatively few above 8 and below 5. It’s not always easy to know what size interval to choose for the x-axis in histograms. It’s worth just playing around with that number and seeing how it looks.\nWhen we set the interval to be some value - here, we chose 0.2 - R doesn’t automatically make that between easy to interpret numbers such as 4.0-4.2, 4.2-4.4 etc. It could just as easily have chosen 3.874-4.074, 4.074-4.274. Obviously, the latter is hard for us to interpret when looking at the axes. You can see in the above plot, that the vertical lines of the histogram bars don’t neatly fall on top of whole numbers. To fix, this you can adjust the boundaries by picking a value to center your interval on. So, if we pick boundary=4, then that will be a boundary marker, and the interval will go 4.0-4.2, 4.2-4.4 etc.\n\nggplot(film, aes(x = imdb)) + \n  geom_histogram(binwidth = 0.2, color=\"white\", fill=\"dodgerblue\",boundary=4) \n\n\n\n\nJust be careful with using the boundaries that it does not crop your histogram incorrectly. Changing histograms too much can lead to misrepresenting the data. We would recommend that you don’t use the boundary feature unless you have a real need to do so - just be careful!\nLike with all ggplot figures, you can add as much customization as you wish. Here, we add a new theme, title and x- and y-axis labels:\n\nggplot(film, aes(x = imdb)) + \n  geom_histogram(binwidth = 0.2, color=\"white\", fill=\"dodgerblue\") +\n  theme_classic() +\n  ggtitle(\"Histogram of IMDB Ratings\") +\n  xlab(\"Rating\") +\n  ylab(\"Frequency\")\n\n\n\n\nThis looks really nice !"
  },
  {
    "objectID": "histograms.html#density-curves",
    "href": "histograms.html#density-curves",
    "title": "4  Histograms",
    "section": "4.2 Density Curves",
    "text": "4.2 Density Curves\nInstead of plotting the frequency or counts of values on the y-axis, we can instead plot density. Here, we essentially convert the histogram to a solid line that estimates the overall shape of the distribution. We call this line a density curve. You can make this plot using ggplot() using + geom_density() instead of + geom_histogram().\nIn the code below we do this for the imdb ratings, and we make the line color navy, and the fill of the density curve dodgerblue:\n\nggplot(film, aes(x = imdb)) + \n  geom_density(color = \"navy\", fill = \"dodgerblue\") \n\n\n\n\nUsually the fill of these plots is too much, so it’s nice to add some transparency. You can do that by picking a number between 0 and 1 to provide to the alpha argument. Here we choose alpha = .4:\n\nggplot(film, aes(x = imdb)) +  \n  geom_density(color = \"navy\", fill = \"dodgerblue\", alpha=.4)\n\n\n\n\nThe useful thing about density plots is that they give you a quick visual aid as to the overall shape of the distribution. You can easily see where the bulk of the data lie (here between 6 and 8 ratings score), and whether the data is symmetrical or not."
  },
  {
    "objectID": "histograms.html#comparing-distributions",
    "href": "histograms.html#comparing-distributions",
    "title": "4  Histograms",
    "section": "4.3 Comparing Distributions",
    "text": "4.3 Comparing Distributions\nInstead of just plotting one histogram or one density curve, we often are interested in comparing two or more distributions. This means we are interested in comparing two or more histograms or density curves. To do this, we first need to ensure that our data are all measured in the same units.\n\nOverlaid Histograms\nTo illustrate this, let’s use the lifeexp.csv data which contains life expectancy data for many countries.\n\nlife <- read_csv(\"data_raw/lifeexp.csv\")\nhead(life)\n\n# A tibble: 6 x 6\n  country     continent year      lifeExp      pop gdpPercap\n  <chr>       <chr>     <chr>       <dbl>    <dbl>     <dbl>\n1 Afghanistan Asia      year_1952    28.8  8425333      779.\n2 Afghanistan Asia      year_2007    43.8 31889923      975.\n3 Albania     Europe    year_1952    55.2  1282697     1601.\n4 Albania     Europe    year_2007    76.4  3600523     5937.\n5 Algeria     Africa    year_1952    43.1  9279525     2449.\n6 Algeria     Africa    year_2007    72.3 33333216     6223.\n\n\nYou can see that one of the columns is called lifeExp which is the life expectancy of each country in either 1952 or 2007. The year is shown in the year column, and the country is shown in the country column. You’ll notice that these data are in long format.\nPerhaps we are interested in the distribution of life expectancies across all countries in the year 1952 compared to the distribution of life expectancies in the year 2007. We have a few options to do this.\nThe first option does not look good for this example (although it may work in other situations). This is an overlaid histogram. To do this, inside aes() as well as saying which column our distribution data is in x=lifeExp, we also tell it to make separate histograms based on the year column with fill=year. This will ensure it uses different fill colors for the two different years. Although not necessary, putting position=\"identity\" inside geom_histogram() helps make the plot a little nicer. Putting color=\"black\" and alpha=.7 inside geom_histogram() also helps distinguish the two histograms.\n\nggplot(life, aes(x=lifeExp, fill=year)) +  \n  geom_histogram(binwidth=2, position=\"identity\", color=\"black\", alpha=.7) +\n  theme_minimal()\n\n\n\n\nThis plot is still pretty bad though. This method of plotting is better when the histograms are quite distinctive from one another and there isn’t much overlap in the distributions.\nChoosing two colors that contrast more strongly than the default colors can help. Here, we are using hexcodes to pick a gray and a mustard yellow color. We manually define our fill colors using +  scale_fill_manual(values = c(\"#999999\", \"#E69F00\")). To change the colors, just change the hexcodes to different ones or the names of colors you’d like. Just make sure that you have the same number of colors as groups in your data. Here, we have two groups (1952 and 2007) so we need two colors. Also, notice that it says scale_fill_manual and not scale_color_manual. Because we are dealing with the inside color - this is considered to be a fill in ggplot2 terms. We used fill=year inside aes() so we need to match that with fill when manually choosing colors.\n\nggplot(life, aes(x=lifeExp, fill=year)) +  \n  geom_histogram( binwidth=2, position=\"identity\", color=\"black\", alpha=.7) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"#999999\", \"#E69F00\"))\n\n\n\n\nOverlaid Density Plots\nComparing distributions can also be done with geom_density. This is usually simpler to compare than overlaid histograms.\nThe default plot for this would be to include fill=year inside the aes() code, as the year column contains the data that we wish to make separate plots for.\n\nggplot(life, aes(x=lifeExp, fill=year)) +  \n  geom_density(alpha = 0.4) \n\n\n\n\nWe can add a custom fill colors with + scale_fill_manual(values = c(\"#999999\", \"#E69F00\")) and a custom theme with + theme_classic().\n\nggplot(life, aes(x=lifeExp, fill=year)) +  \n  geom_density(aes(fill = year), alpha = 0.4) +\n  scale_fill_manual(values = c(\"#999999\", \"#E69F00\"))  + \n  theme_classic()\n\n\n\n\nThis plot is now very easy to interpret. It’s clear that in 2007 most countries had life expectancies of over 70, with a tail towards younger life expectancies. In 1952, the opposite pattern is found with most countries having life expectancies around 40 with the tail going towards older countries."
  },
  {
    "objectID": "histograms.html#stem-and-leaf-plots",
    "href": "histograms.html#stem-and-leaf-plots",
    "title": "4  Histograms",
    "section": "4.4 Stem-and-Leaf Plots",
    "text": "4.4 Stem-and-Leaf Plots\nStem-and-leaf plots are a simplistic version of histograms. Before the advent of computers, this kind of plot would sometimes be easier to make than a histogram. Their heyday was quite a few decades ago! In fact, nowadays, these types of plots are almost never made by researchers or data scientists in the real world. They are pretty much exclusive to introductory statistics courses. This is a bit of a shame because we think they are pretty cute.\nHere is an example. Imagine we have the following numbers in a distribution. They may represent temperatures:\n20, 20, 23, 28, 29, 31, 32, 39, 40, 41, 42, 44, 44, 45, 48, 49, 55, 55, 56, 58, 59, 61, 62, 65, 66, 67, 70, 71, 75, 82, 86\nWe can represent these in a stem-and-leaf plot as below. The first column represents the “tens” and the second column represents the “ones”. So the “6” in the last row in the second column represents a temperature of 86. We put the second column data in ascending order. The heights of these bars represent a kind of histogram of sorts.\n\nThe columns do not have to be tens and ones. For instance, if our data had been seconds, and the distribution was 2.0, 2.0, 2.3, 2.8....... 7.5, 8.2, 8.6 we could have done the same stem-and-leaf plot.\nThere isn’t a simple ggplot way of making stem-and-leaf plots, but there is a built-in function called stem() that can make them.\nFor an example, if we return to our imdb ratings:\n\nhead(film)\n\n# A tibble: 6 x 5\n  film                     year rottentomatoes  imdb metacritic\n  <chr>                   <dbl>          <dbl> <dbl>      <dbl>\n1 Avengers: Age of Ultron  2015             74   7.8         66\n2 Cinderella               2015             85   7.1         67\n3 Ant-Man                  2015             80   7.8         64\n4 Do You Believe?          2015             18   5.4         22\n5 Hot Tub Time Machine 2   2015             14   5.1         29\n6 The Water Diviner        2015             63   7.2         50\n\n\nWe can make a stem-and-leaf plot of the imdb column like this. The scale=0.6 parameter dictates how long the stem-and-leaf plot should be. You can adjust it to your liking. Lower numbers make the plot shorter:\n\nstem(film$imdb, scale=0.6)\n\n\n  The decimal point is at the |\n\n  4 | 0234\n  4 | 6699\n  5 | 01224444\n  5 | 555556678999\n  6 | 0011112333333333444444\n  6 | 5555666666666777777789999999\n  7 | 0000111111122222222223333344444444\n  7 | 555555666777788888888899\n  8 | 012222344\n  8 | 6\n\n\nHere, the lowest rating we have is 4.0, and the highest is 8.6."
  },
  {
    "objectID": "smallmult.html#scatterplot-small-multiple",
    "href": "smallmult.html#scatterplot-small-multiple",
    "title": "7  Small Multiples",
    "section": "7.1 Scatterplot small multiple",
    "text": "7.1 Scatterplot small multiple\nHere, we load in the penguins.csv dataset. This data shows the size of various penguins culmen (the beak) and flippers:\n\nlibrary(tidyverse)\npenguins <- read_csv(\"data_raw/penguins.csv\")\nhead(penguins)\n\n# A tibble: 6 x 7\n  species island    culmen_length_mm culmen_depth_mm flipper_len~1 body_~2 sex  \n  <chr>   <chr>                <dbl>           <dbl>         <dbl>   <dbl> <chr>\n1 Adelie  Torgersen             39.1            18.7           181    3750 MALE \n2 Adelie  Torgersen             39.5            17.4           186    3800 FEMA~\n3 Adelie  Torgersen             40.3            18             195    3250 FEMA~\n4 Adelie  Torgersen             36.7            19.3           193    3450 FEMA~\n5 Adelie  Torgersen             39.3            20.6           190    3650 MALE \n6 Adelie  Torgersen             38.9            17.8           181    3625 FEMA~\n# ... with abbreviated variable names 1: flipper_length_mm, 2: body_mass_g\n\n\nThe dataset contains three different species:\n\ntable(penguins$species)\n\n\n   Adelie Chinstrap    Gentoo \n      146        68       119 \n\n\nWe might be interested in examining how body mass is associated with flipper length across species and across sex. Here, we have two different columns containing categorical variables. We have sex and species. If we wanted to show all of this on just one scatterplot, we could change the color of the points to represent species, and the shape of the points to represent sex. We change the shape by a column using shape= inside of aes():\n\nggplot(penguins, aes(x = body_mass_g,  y = flipper_length_mm, \n                     color = species, shape = sex)) + \n  geom_point() +\n  theme_classic()\n\n\n\n\nThe problem with this sort of graph is that it is far too cluttered. Using shape to distinguish categories isn’t that useful or helpful. You really have to squint at the graph to work out what is a circle and what is a triangle.\nAn alternative approach is to make small multiples. We create a separate scatterplot for each species. Here, we color our points by sex with color=sex inside aes(). We add to our code the line facet_wrap(~species) to tell ggplot() to make separate scatterplots for each species. Please note the ~ that comes before the column name that you wish to make separate plots for:\n\nggplot(penguins, aes(x = body_mass_g,  y = flipper_length_mm, color = sex)) + \n  geom_point() +\n  theme_minimal() +\n  facet_wrap(~ species)\n\n\n\n\nYou may notice that all the scatterplots have the same range of values on the x-axis. Technically, this is the most appropriate approach as it enables you to make comparisons across groups more easily. However, if you want to fit the data on each scatterplot to cover the whole canvas, you can make the axes unfixed by adding scales=\"free\" to your facet_wrap() command:\n\nggplot(penguins, aes(x = body_mass_g,  y = flipper_length_mm, color = sex)) + \n  geom_point() +\n  theme_minimal() +\n  facet_wrap(~ species, scales = \"free\")"
  },
  {
    "objectID": "smallmult.html#line-graph-small-multiple",
    "href": "smallmult.html#line-graph-small-multiple",
    "title": "7  Small Multiples",
    "section": "7.2 Line graph small multiple",
    "text": "7.2 Line graph small multiple\nWe can also make small multiples for line graphs. Let’s illustrate this using the lifeexp_all.csv dataset.\n\nle <- read_csv(\"data_raw/lifeexp_all.csv\")\n\nhead(le)\n\n# A tibble: 6 x 6\n  country     continent  year lifeExp      pop gdpPercap\n  <chr>       <chr>     <dbl>   <dbl>    <dbl>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\nIn this dataset we have a column giving the life expectancy (lifeExp) of various countries that are in the country column. We also have a year column that goes from 1952 to 2007 at five year intervals. Consequently, we could plot a line graph of year on the x-axis and life expectancy on the y-axis. We could make separate lines for each country. As there are far too many countries to plot, it is not worth making each one a separate color. Because of this, rather than putting color=country into aes() to indicate to make separate lines for each country, we’ll put group=country. This will make separate lines for each country, but make them all the same color. If we make them a light color and a bit transparent, it will look best:\n\nggplot(le, aes(x = year, y = lifeExp, group = country)) + \n  geom_line(color=\"cornflowerblue\", alpha=0.2) +\n  theme_minimal()\n\n\n\n\nThis gives us a sense of the overall pattern of life expectancies from 1952 to 2007. The trend for most countries is generally upwards, though there are some countries that have big crashes.\nWe also have another categorical variable in our dataset. There is a column called continent. We could replot this line graph, but separate the plots based on which continent the lines/countries belong to. We do that again using facet_wrap(~continent).\n\nggplot(le, aes(x = year, y = lifeExp, group = country)) + \n  geom_line(color=\"cornflowerblue\", alpha=0.5) +\n  theme_minimal() +\n  facet_wrap(~continent)\n\n\n\n\nBecause there are fewer lines on each graph, we upped the alpha to 0.5 to make the lines a bit darker on this plot.\nIf you wish to make the lines belonging to each panel different colors from each other, you can add color=continent to your aes(). You have to remove the color from geom_line() to make this work:\n\nggplot(le, aes(x = year, y = lifeExp, group = country, color = continent)) + \n  geom_line( alpha=0.5) +\n  theme_minimal() +\n  facet_wrap(~continent)+\n  xlab(\"Year\") +\n  ylab(\"Life Expectancy\")"
  },
  {
    "objectID": "heatmaps.html#example-1--categorical-axes",
    "href": "heatmaps.html#example-1--categorical-axes",
    "title": "8  Heatmaps",
    "section": "8.1 Example 1 -Categorical axes",
    "text": "8.1 Example 1 -Categorical axes\nHere, we have a dataset where we have three columns. The first column represents categorical variables (A to E) that will go on the bottom x-axis. The second column represents categorical variables (A to E) that will go on the y-axis. We have one row for every possible combination, so in this case we have 25 rows. The third column contains the value that we wish to represent by the fill color in the tile of the heatmap. I am using random values between 1 and 100 for this. The higher the value, the deeper the color we will use.\n\nset.seed(101)\nn <- 5\ndf <- data.frame(Var1=rep(LETTERS[1:n],n),\n                 Var2=rep(LETTERS[1:n],each=n),\n                 Value=sample(1:100, replace=T, n*n)\n)\nhead(df)\n\n  Var1 Var2 Value\n1    A    A    73\n2    B    A    57\n3    C    A    46\n4    D    A    95\n5    E    A    81\n6    A    B    58\n\n\nBelow, we will plot the heatmap without adding any stylistic elements.\n\n\n\n\nlibrary(tidyverse)\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile() \n\n\n\n\nAs can be seen, each cell (or tile) has a different degree of color fill based on it’s cell value in the Value column of the dataframe df. Brighter and lighter colors represent higher values of the Value column.\nA first step to make this prettier may be to add boundaries between the cells. This can be done by adding a linewidth and a color of this line as follows:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75)\n\n\n\n\nThis looks nicer. Another thing that bugs me is that the default is to produce rectangular cells rather than square cells. This can be fixed by adding coord_equal().\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal()\n\n\n\n\nA next step that I often to is to add the following code to ensure that my cells are centered above each label. In this case, this doesn’t seem to change very much, but I have found it to be useful occasionally:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) \n\n\n\n\nThe next thing that bugs me about this heatmap is that the default color gradient isn’t particularly intuitive to me. I’d rather my values go from a light color (low values) to a darker color (high values). To do this, we can state a low and high color value within scale_fill_continuous(). Here, we go from a very light to a darker purple color.\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\")\n\n\n\n\nNext, I find the axes labels and tick marks annoying, so I can remove these using xlab(\"\"), ylab(\"\"), and axis.ticks() inside theme(). I also increase the size of the labels on the axes.\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2))\n  )\n\n\n\n\nFinally, I’d rather my legend be on the bottom of the heatmap, and we don’t need the label on the legend. This can also be fixed within the theme() argument:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  ) \n\n\n\n\nAs a quick aside - what happens if we have missing values in our Value column? Let’s introduce five random NA values into that column:\n\ndf$Value[sample(1:25,5)]<-NA\nhead(df)\n\n  Var1 Var2 Value\n1    A    A    NA\n2    B    A    57\n3    C    A    46\n4    D    A    95\n5    E    A    81\n6    A    B    NA\n\n\nNow we can plot with the same code as above:\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  ) \n\n\n\n\nWhat happens is that these default to a dark-greyish beige color, as seen above. In some circumstances, this color fill will be fine. However, in other situations we might want to dictate the color. Here, we make those NA cells white by adding na.value = \"white\" inside our scale_fill_continuous() .\n\nggplot(df, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#edf4f7\", high=\"#123abc\", na.value = \"white\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )"
  },
  {
    "objectID": "heatmaps.html#example-2---discrete-numerical-axes.",
    "href": "heatmaps.html#example-2---discrete-numerical-axes.",
    "title": "8  Heatmaps",
    "section": "8.2 Example 2 - Discrete numerical axes.",
    "text": "8.2 Example 2 - Discrete numerical axes.\nAxes don’t have to be categorical. You can use discrete numbers also. They will be plotted in numerical order. Here we produce an example of a matrix which is 56 columns wide and 4 rows tall.\n\nset.seed(101)\ndf1 <- data.frame(Var1=rep(1:6,4),\n                 Var2=rep(1:4,each=6),\n                 Value=sample(1:100, replace=T, 24)\n)\nhead(df1)\n\n  Var1 Var2 Value\n1    1    1    73\n2    2    1    57\n3    3    1    46\n4    4    1    95\n5    5    1    81\n6    6    1    58\n\n\nUsing the same code as above - just changing the colors to a green palette:\n\nggplot(df1, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#ddead1\", high=\"#378805\", na.value = \"white\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )\n\n\n\n\nNote that numeric values don’t show automatically here. This is because of the scale_x_discrete() and scale_y_discrete() lines. We can add the numeric labels by using the continuous scales instead and dictating what the breaks should be if required:\n\nggplot(df1, aes(Var1, Var2, fill = Value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_continuous(expand = c(0, 0), breaks=1:6) +\n  scale_y_continuous(expand = c(0, 0)) + \n  scale_fill_continuous(low=\"#ddead1\", high=\"#378805\", na.value = \"white\") +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )"
  },
  {
    "objectID": "heatmaps.html#example-3-correlation-matrices",
    "href": "heatmaps.html#example-3-correlation-matrices",
    "title": "8  Heatmaps",
    "section": "8.3 Example 3: Correlation Matrices",
    "text": "8.3 Example 3: Correlation Matrices\nA common usage of heatmaps is to illustrate the correlations between a set of continuous variables.\nFirst, we should look at some data. Let’s import the dataset cordata.csv from our folder data_raw. This dataset contains eight continuous variables, boringly named V1, V2,…… V8.\n\ncd <- read.csv(\"data_raw/cordata.csv\")\nhead(cd)\n\n    V1    V2     V3     V4    V5     V6    V7   V8\n1 7.07 34.18 179.62 141.72 14.24 113.47 15.83 1.59\n2 7.43 43.51 107.77 111.40 10.86 139.11 16.76 0.00\n3 1.75  4.74 224.06 113.71 10.65 102.81 22.50 7.29\n4 0.68 16.75  20.00 101.66 16.48 127.23 22.12 5.36\n5 3.15 19.81 251.27 144.41 10.08 125.46 22.34 7.73\n6 3.60 27.98 233.61 137.11 10.02 156.36 24.18 2.18\n\n\nA quick way to get all the correlations between continuous variables in a data.frame is to use cor(). I’m surrounding this function with round() to make the output more easy to read:\n\ncdmat <- round(cor(cd),2)\ncdmat\n\n      V1    V2    V3    V4    V5    V6    V7    V8\nV1  1.00  0.87 -0.26 -0.02  0.15  0.19 -0.75 -0.79\nV2  0.87  1.00 -0.33 -0.15  0.15  0.17 -0.74 -0.92\nV3 -0.26 -0.33  1.00  0.34 -0.81 -0.25  0.44  0.38\nV4 -0.02 -0.15  0.34  1.00 -0.03  0.40  0.03  0.26\nV5  0.15  0.15 -0.81 -0.03  1.00  0.33 -0.30 -0.23\nV6  0.19  0.17 -0.25  0.40  0.33  1.00 -0.39 -0.08\nV7 -0.75 -0.74  0.44  0.03 -0.30 -0.39  1.00  0.64\nV8 -0.79 -0.92  0.38  0.26 -0.23 -0.08  0.64  1.00\n\n\nThis matrix is essentially what we want to plot, however, to do that, we first need to turn it into a dataframe with three columns. The first two being the row and column of the eventual plot and the third being the fill value (the correlation coeffecient). We can melt() the matrix into that dataframe:\n\ncdmat.df <- reshape2::melt(cdmat)\nhead(cdmat.df)\n\n  Var1 Var2 value\n1   V1   V1  1.00\n2   V2   V1  0.87\n3   V3   V1 -0.26\n4   V4   V1 -0.02\n5   V5   V1  0.15\n6   V6   V1  0.19\n\n\nLet’s plot this long data using similar code to above. However, here I’m using scale_fill_gradient2() to set low, mid and high colors at Pearson correlations of -1, 0 and +1 respectively:\n\nggplot(cdmat.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\", \n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nThere are three problems with this matrix. First, who cares that the diagonals are all r=1. We don’t need that information. Second, correlation matrices have symmetry along the axis, and so we could just plot either the upper or lower triangle of the matrix. Third, these variables could be reordered to make the relationships between variables be more intuitive.\nLet’s get rid of the diagonal and only keep the lower triangle. We can use the functions diag() and upper.tri() to make the diagonal and top triangle of the matrix NA. Then we melt the matrix again:\n\ndiag(cdmat)<-NA\ncdmat[upper.tri(cdmat)]<-NA\ncdmat\n\n      V1    V2    V3    V4    V5    V6   V7 V8\nV1    NA    NA    NA    NA    NA    NA   NA NA\nV2  0.87    NA    NA    NA    NA    NA   NA NA\nV3 -0.26 -0.33    NA    NA    NA    NA   NA NA\nV4 -0.02 -0.15  0.34    NA    NA    NA   NA NA\nV5  0.15  0.15 -0.81 -0.03    NA    NA   NA NA\nV6  0.19  0.17 -0.25  0.40  0.33    NA   NA NA\nV7 -0.75 -0.74  0.44  0.03 -0.30 -0.39   NA NA\nV8 -0.79 -0.92  0.38  0.26 -0.23 -0.08 0.64 NA\n\n\n\ncdlt.df <- reshape2::melt(cdmat)\nhead(cdlt.df)\n\n  Var1 Var2 value\n1   V1   V1    NA\n2   V2   V1  0.87\n3   V3   V1 -0.26\n4   V4   V1 -0.02\n5   V5   V1  0.15\n6   V6   V1  0.19\n\n\nWe can plot this in the same way as before but adding na.value=\"white\" inside the scale_fill_gradient2() to white out the NA values, leaving the bottom of the matrix.\n\nggplot(cdlt.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       na.value=\"white\",\n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nTo reorder the matrix, we first need to recreate our original correlation matrix.\n\ncdmat1 <- round(cor(cd),2)\ncdmat1\n\n      V1    V2    V3    V4    V5    V6    V7    V8\nV1  1.00  0.87 -0.26 -0.02  0.15  0.19 -0.75 -0.79\nV2  0.87  1.00 -0.33 -0.15  0.15  0.17 -0.74 -0.92\nV3 -0.26 -0.33  1.00  0.34 -0.81 -0.25  0.44  0.38\nV4 -0.02 -0.15  0.34  1.00 -0.03  0.40  0.03  0.26\nV5  0.15  0.15 -0.81 -0.03  1.00  0.33 -0.30 -0.23\nV6  0.19  0.17 -0.25  0.40  0.33  1.00 -0.39 -0.08\nV7 -0.75 -0.74  0.44  0.03 -0.30 -0.39  1.00  0.64\nV8 -0.79 -0.92  0.38  0.26 -0.23 -0.08  0.64  1.00\n\n\nNext, we can use a clustering method such as hierarchical clustering to identify the relationships between each variable:\n\ndd <- as.dist((1-cdmat1)/2)\nhc <- hclust(dd)\ncdmat1 <-cdmat1[hc$order, hc$order]\ncdmat1\n\n      V3    V7    V8    V4    V6    V5    V1    V2\nV3  1.00  0.44  0.38  0.34 -0.25 -0.81 -0.26 -0.33\nV7  0.44  1.00  0.64  0.03 -0.39 -0.30 -0.75 -0.74\nV8  0.38  0.64  1.00  0.26 -0.08 -0.23 -0.79 -0.92\nV4  0.34  0.03  0.26  1.00  0.40 -0.03 -0.02 -0.15\nV6 -0.25 -0.39 -0.08  0.40  1.00  0.33  0.19  0.17\nV5 -0.81 -0.30 -0.23 -0.03  0.33  1.00  0.15  0.15\nV1 -0.26 -0.75 -0.79 -0.02  0.19  0.15  1.00  0.87\nV2 -0.33 -0.74 -0.92 -0.15  0.17  0.15  0.87  1.00\n\n\nWe then do the same process of adding NA to the diagonal and upper triangle of the matrix, and we can plot:\n\ndiag(cdmat1)<-NA\ncdmat1[upper.tri(cdmat1)]<-NA\ncdlt1.df <- reshape2::melt(cdmat1)\n\nggplot(cdlt1.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       na.value=\"white\",\n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  )\n\n\n\n\nOne final step that we might want to do is to add the actual correlations over the top of the colored cells. We can add this with geom_text().\n\nggplot(cdlt1.df, aes(Var1, Var2, fill = value)) + \n  geom_tile(color=\"white\", linewidth=1.75) +\n  coord_equal() +\n  geom_text(aes(Var1, Var2, label = value), color = \"black\", size = 3.5) +\n  scale_x_discrete(expand = c(0, 0)) +\n  scale_y_discrete(expand = c(0, 0)) + \n  scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",\n                       na.value=\"white\",\n                       midpoint = 0, limit = c(-1,1), space = \"Lab\", \n                       name=\"Pearson's r\")  +\n  xlab(\"\") + \n  ylab(\"\") +\n  theme(\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"black\", size=rel(1.2)),\n    legend.text = element_text(color=\"black\", size=rel(1.0)),\n    legend.background = element_rect(fill=\"white\"),\n    legend.position = \"bottom\"\n  )"
  },
  {
    "objectID": "heatmaps.html#some-practical-examples",
    "href": "heatmaps.html#some-practical-examples",
    "title": "8  Heatmaps",
    "section": "8.4 Some practical examples",
    "text": "8.4 Some practical examples\nBelow are some well known examples of using geom_tile() to create heatmaps examining trends in the prevalence of diseseas over time. First, we’ll look at the effect of birth month on risk of developing schizophrenia in an Australian cohort. This is using the schz dataset from the season R package:\n\nschz <- read.csv(\"data_raw/schz.csv\")\nhead(schz)\n\n  year month    yrmon NBirths SczBroad  SOI\n1 1930     1 1930.000    1578        8 12.7\n2 1930     2 1930.083    1519       11  7.7\n3 1930     3 1930.167    1630       15  1.8\n4 1930     4 1930.250    1607       12 -3.8\n5 1930     5 1930.333    1566       10  2.1\n6 1930     6 1930.417    1491        8 -5.5\n\nrange(schz$year)\n\n[1] 1930 1971\n\n\nEach row of this dataset contains information on the incidence of schizophrenia for individuals born for each month of the year between 1930-1971. We use the column SczBroad as a measure of schizophrenia risk at each timepoint.\nWe plot the data below using similar code to above. In addition, we are using scale_fill_viridis() from the viridis R package to fill our tiles from a gradient of dark purple (low risk) to bright yellow (high risk). We are using option D, one of four colorblind friendly palettes available in this package. Within theme() most of the lines are making the background panel and borders a dark gray color (gray10), and adjusting the placement of text labels.\n\nlibrary(viridis)\n\nggplot(schz, aes(year, month, fill = SczBroad)) + \n  geom_tile(colour=\"gray10\", linewidth=1.1) + \n  coord_equal() +\n  scale_fill_viridis(option=\"D\",na.value = \"gray10\") +\n  scale_y_continuous(breaks=1:12, labels=month.abb[1:12])+\n  xlab(\"\") + \n  ylab(\"\") +\n  ggtitle(\"Schizophrenia Risk By Birth Month and Year in Australia\") +\n  theme(\n    plot.title = element_text(color=\"white\",hjust=0,vjust=1, size=rel(1.3)),\n    plot.background = element_rect(fill=\"gray10\"),\n    panel.background = element_rect(fill=\"gray10\"),\n    panel.border = element_rect(fill=NA,color=\"gray10\", linewidth = 0.5, linetype=\"solid\"),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.line = element_blank(),\n    axis.ticks = element_blank(), \n    axis.text = element_text(color=\"white\", size=rel(0.8)),\n    axis.text.y  = element_text(hjust=1, margin = margin(r = -20)),\n    legend.text = element_text(color=\"white\", size=rel(1.1)),\n    legend.background = element_rect(fill=\"gray10\"),\n    legend.position = \"bottom\",\n    legend.title=element_blank()\n  )\n\n\n\n\n\nIn the next example, we are looking at the effect of the introduction of vaccinations on the prevalence of measles in the USA. The data are in the diseases.csv dataset. I’ve based this on code from this blog post.\n\ndis <- read.csv(\"data_raw/diseases.csv\")\nhead(dis)\n\n      disease   state year weeks_reporting count population\n1 Hepatitis A Alabama 1966              50   321    3345787\n2 Hepatitis A Alabama 1967              49   291    3364130\n3 Hepatitis A Alabama 1968              52   314    3386068\n4 Hepatitis A Alabama 1969              49   380    3412450\n5 Hepatitis A Alabama 1970              51   413    3444165\n6 Hepatitis A Alabama 1971              51   378    3481798\n\n\nThe dataset contains the total number of cases reported by each state for each disease for each year between 1928-2011. It should be noted that not all states start at the same time point. As can be seen above, Alabama’s Hepatitis reporting starts in 1966. In total, there are data on 7 different diseases, but we’ll just look at measles.\n\ntable(dis$disease)\n\n\nHepatitis A     Measles       Mumps   Pertussis       Polio     Rubella \n       2346        3876        1836        3774        3774        1938 \n   Smallpox \n       1326 \n\n\nTo compare across years and states, we need to make our data more uniform. One way is to look at the number of cases per e.g. 100,000 people. However, this is complicated by the issue that the data don’t come from full years but from different number of weeks within a year. So first, we should get a “per week” count for each disease in each state and then multiply by 52 to get a “per year” count. Then we can divide this by the population of the state in that year and multiply that by 100,000 to get an incidence per 100k people:\n\ndis.sum <- dis %>%\n  group_by(state,disease,year) %>%\n  summarise(peryear = 52*(count/weeks_reporting),\n            per100k = 100000*(peryear/population))\n\nhead(dis.sum)\n\n# A tibble: 6 x 5\n# Groups:   state, disease [1]\n  state   disease      year peryear per100k\n  <chr>   <chr>       <int>   <dbl>   <dbl>\n1 Alabama Hepatitis A  1966    334.    9.98\n2 Alabama Hepatitis A  1967    309.    9.18\n3 Alabama Hepatitis A  1968    314     9.27\n4 Alabama Hepatitis A  1969    403.   11.8 \n5 Alabama Hepatitis A  1970    421.   12.2 \n6 Alabama Hepatitis A  1971    385.   11.1 \n\n\nLet’s focus on Hepatitis A. Before plotting we will do two additional data carpentry steps. We will first reverse the order of the levels of the factor state. The default way to plot these states will be in alphabetical order along the y-axis starting with Alabama closest to the x-axis and Wyoming the furthest away. However, this is annoying to read as we are used to seeing A’s at the top and W’s near the bottom of a list of states. Second, rather than filling the tiles in a continuous gradient, we will create 7 discrete bins of color. These bins are not equivalent in terms of size which does somewhat break the rules of data visualization - i.e. an equal step in color gradient should map to an equal step in value. However, I think it can be justified in this context as we are interested in picking out “very low”, “low”, “medium”, “high”, “very high” number of cases etc. This new variable will be called countfactor.\n\nmeas <- dis.sum %>% filter(disease==\"Measles\") %>%\n        mutate(countfactor=cut(per100k, breaks=c(-1, 0, 1, 10, 100, 500, 1000, max(per100k, na.rm=T)),labels=c(\"0\", \"0-1\", \"1-10\", \"10-100\", \"100-500\", \"500-1000\", \">1000\"))) %>%\n  mutate(countfactor=factor(as.character(countfactor), levels=rev(levels(countfactor))))\n\nmeas$state <- factor(meas$state, levels = rev(unique(meas$state)))\n\nhead(meas)\n\n# A tibble: 6 x 6\n# Groups:   state, disease [1]\n  state   disease  year peryear per100k countfactor\n  <fct>   <chr>   <int>   <dbl>   <dbl> <fct>      \n1 Alabama Measles  1928   8843    341.  100-500    \n2 Alabama Measles  1929   3140.   120.  100-500    \n3 Alabama Measles  1930   4156    157.  100-500    \n4 Alabama Measles  1931   9481.   355.  100-500    \n5 Alabama Measles  1932    342.    12.7 10-100     \n6 Alabama Measles  1933   1769.    65.2 10-100     \n\n\nBelow we plot the data using geom_tile(). We use scale_fill_manual() with 7 colors that we pick ourselves to represent the 7 categories. Inside theme() we control the sizes and colors of text and the background colors. We also use coord_cartesian(), geom_vline() and annotate() to add the black line at 1963 and associate text to indicate when the vaccine was introduced.\n\n# assign text color\ntextcol <- \"grey40\"\n\np <- ggplot(meas, aes(x=year, y=state, fill=countfactor))+\n  geom_tile(color=\"white\", linewidth=0.2)+\n  guides(fill=guide_legend(title=\"Cases per\\n100,000 people\"))+\n  labs(x=\"\", y=\"\", title=\"Incidence of Measles in the US\")+\n  scale_y_discrete(expand=c(0, 0))+\n  scale_x_continuous(expand=c(0, 0), breaks=seq(1930,2000,10))+\n  scale_fill_manual(values=c(\"#d53e4f\", \"#f46d43\", \"#fdae61\", \"#fee08b\", \"#e6f598\", \"#abdda4\", \"#ddf1da\"), na.value = \"grey90\")+\n  coord_cartesian(clip = 'off')+\n  geom_vline(xintercept = 1963, col = \"black\") +\n  theme_grey(base_size=10)+\n  theme(legend.position=\"right\", legend.direction=\"vertical\",\n        legend.title=element_text(colour=textcol),\n        legend.margin=margin(grid::unit(0, \"cm\")),\n        legend.text=element_text(colour=textcol, size=7, face=\"bold\"),\n        legend.key.height=grid::unit(0.8, \"cm\"),\n        legend.key.width=grid::unit(0.2, \"cm\"),\n        axis.text.x=element_text(size=10, color=textcol),\n        axis.text.y=element_text(vjust=0.2, size=rel(0.7), color=textcol),\n        axis.ticks=element_line(size=0.4),\n        plot.background=element_blank(),\n        panel.border=element_blank(),\n        plot.margin=margin(0.7, 0.4, 0.1, 0.2, \"cm\"),\n        plot.title=element_text(colour=textcol, hjust=0, size=14, face=\"bold\")\n      )+ \n  annotate(geom = \"text\", x = 1963.5, y = 52, label = \"Vaccine introduced\", size = 3, hjust = 0)\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\ni Please use the `linewidth` argument instead.\n\np\n\n\n\n\n\nRather than manually writing in the colors we want to represent each discrete group, we could also use a palette of 7 colors by using the RColorBrewer package.\n\nlibrary(RColorBrewer)\np + scale_fill_manual(values=rev(brewer.pal(7, \"YlGnBu\")), na.value=\"grey90\")"
  },
  {
    "objectID": "savingexporting.html#ggsave",
    "href": "savingexporting.html#ggsave",
    "title": "11  Saving and Exporting Plots",
    "section": "11.1 ggsave()",
    "text": "11.1 ggsave()\nA more premium option is to use a function from ggplot called ggsave(). The first step you should do is to assign your plot to an object name. In the code below, we are making a scatterplot that we save to the object plot1:\n\nlibrary(tidyverse)\n\ncheese <- read_csv(\"data_raw/cheese.csv\")\n\nplot1 <- ggplot(cheese, aes(x = chol, y = kcal)) + \n     geom_point(color='purple', size=2) + \n     theme_classic() +\n     xlab(\"Cholesterol\") +\n     ylab(\"Calories in kcal\") +\n     ggtitle(\"Cheese\")\n\nplot1\n\n\n\n\nNext, run a line of code that will save your plot. You type ggsave(). The first thing you put inside this is the location where you want your plot to be stored. You need to write a location on your computer. If you are using an Rproject such as with this course, you could put your plot in a folder called img. Remember to type the file extension .png or .pdf after the name of your new plot. The second thing you need to write is the name of the graph object you wish to save. Here our graph is called plot1.\n\nggsave(\"img/cheese_plot.png\", plot1)  # save as a png\n\nggsave(\"img/cheese_plot.pdf\", plot1)  # save as a pdf\n\nYou can also play around with the width and height of your saved image. You probably need to trial and error this a few times to get the proportions that you really like. Here we are making an image that is 10 inches wide and 8 inches high.\n\n#(in inches, though can be in cm)\nggsave(\"img/cheese_plot2.png\", plot1, width = 10, height = 8)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "11  Summary",
    "section": "",
    "text": "There is no summary. I was just scared to delete this file."
  },
  {
    "objectID": "bumps.html#basic-bump-chart-in-ggplot",
    "href": "bumps.html#basic-bump-chart-in-ggplot",
    "title": "10  Bump charts",
    "section": "10.1 Basic Bump Chart in ggplot()",
    "text": "10.1 Basic Bump Chart in ggplot()\nWe can look at how to make a bump chart using basic ggplot2 syntax. We’ll recreate the above chart. Let’s import the data:\n\nlibrary(tidyverse)\n\ndf <- read_csv(\"data_raw/torpids.csv\")\nhead(df)\n\n# A tibble: 6 x 8\n  Team            Day1  Day2  Day3  Day4  Day5  Day6  Day7\n  <chr>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Exeter             1     2     3     3     4     5     4\n2 Brasenose          2     1     1     1     1     1     1\n3 Balliol            3     4     4     5     6     7     8\n4 Corpus Christi     4     3     2     2     2     3     3\n5 Pembroke           5     5     6     7     8     9     9\n6 Trinity            6     7     7     6     5     4     5\n\n\nWe have 12 rows of data. Each row is a college team. There are eight columns with the last seven being the ranking of each college on that day. To turn the data into a plottable format, we need to have a long data frame with columns team, day and rank.\n\ndfl <- df %>%\n  pivot_longer(cols=2:8, names_to = \"day\", values_to = \"rank\")\nhead(dfl)\n\n# A tibble: 6 x 3\n  Team   day    rank\n  <chr>  <chr> <dbl>\n1 Exeter Day1      1\n2 Exeter Day2      2\n3 Exeter Day3      3\n4 Exeter Day4      3\n5 Exeter Day5      4\n6 Exeter Day6      5\n\n\nWe can now plot day against rank using a combination of geom_line() and geom_plot(). First we will create a plot color with a legend depicting each college. We use scale_y_reverse() to plot the rankings on the y-axis from highest rank at the top of the plot to lowest ranking at the bottom.\n\nggplot(dfl, aes(x = day, y = rank, color = Team, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  xlab(\"\")+\n  scale_y_reverse(breaks=1:12) +\n  theme_classic()\n\n\n\n\nHowever, I think this plot is a little too colorful. Alternatively, we could create the plot in one color and add labels on the y-axis that have the names of the original ranks of teams. This would be more similar to the original plot:\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  xlab(\"\")+\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  theme_classic()\n\n\n\n\nThere are probably several stylistic changes we could make to this plot to make it more visually appealing. It’s often nice with bump charts to have the dots be empty circles. We can do this by adding smaller white points on top of the points that we already plotted:\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  xlab(\"\") +\n  ylab(\"\") +\n  theme_classic() \n\n\n\n\nIn this plot, I have used the theme() function to remove the y axis line and tick marks and to make the text larger.\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  xlab(\"\") +\n  ylab(\"\") +\n  theme_classic() +\n  theme(\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        axis.text.y = element_text(size = rel(1.5))\n        )\n\n\n\n\nHighlighting Individual Groups\nAnother thing that is often beneficial in bump charts is to highlight individual groups of interest. This is particularly useful if there are lots of subjects. For example, let’s say we are interested in the change in ranking of the Trinity boat over time. What we would like to do is make the other lines more transparent and to make Trinity’s line bolder. To do this, we use alpha() to set the transparencies of the other crews and I also made their colors grayer. Then I create a dataframe that only includes Trinity’s data to plot over the top of our plot, and change the color of their points and lines and thicken their line to emphasize it.\n\nTrinity <- dfl %>% filter(Team==\"Trinity\")\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1, color=\"gray50\", alpha=.3) +\n  geom_point(size=4, color=\"gray50\", alpha=.3) +\n  geom_line(data=Trinity, lwd=2, color=\"#710909\") +\n  geom_point(data=Trinity, size=4, color=\"#710909\") +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  xlab(\"\") +\n  ylab(\"\") +\n  theme_classic() +\n  theme(\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        axis.text.y = element_text(size = rel(1.5))\n        )"
  },
  {
    "objectID": "bumps.html#practical-example---olympics-medal-counts",
    "href": "bumps.html#practical-example---olympics-medal-counts",
    "title": "10  Bump charts",
    "section": "10.2 Practical Example - Olympics Medal Counts",
    "text": "10.2 Practical Example - Olympics Medal Counts\nhttps://dominikkoch.github.io/Bump-Chart/"
  },
  {
    "objectID": "bumps.html#practical-example---babynames-popularity-over-time",
    "href": "bumps.html#practical-example---babynames-popularity-over-time",
    "title": "10  Bump charts",
    "section": "10.3 Practical Example - Babynames popularity over time",
    "text": "10.3 Practical Example - Babynames popularity over time"
  },
  {
    "objectID": "bumps.html#ggbump-package",
    "href": "bumps.html#ggbump-package",
    "title": "10  Bump charts",
    "section": "10.2 ggbump() package",
    "text": "10.2 ggbump() package\nI like the classic angular lines aesthetic of bump charts. However, there may be use cases where we wish to have curved lines joining points. This can be done effectively with the ggbump package.\nThe below code creates the generic plot for the college bumps dataset above. I’ve kept the scale_y_reverse() in the code so that we have the highest ranked team (i.e. 1) at the top of the y-axis, and the lowest ranked at the bottom. The geom_bump() function adds a curved line rather than straight line for each subject across time. The other difference is that I have made the day column numeric by using as.numeric(factor(day)) rather than just day. Although geom_bump() should work with characters, I have found that converting them to numeric variables works best.\n\nlibrary(ggbump)\n\nggplot(dfl, aes(as.numeric(factor(day)), rank, color = Team)) +\n    geom_bump(size=1) +\n    scale_y_reverse(breaks=1:12) \n\n\n\n\nBelow I have customized this plot with some additional code. I have decided to create a palette of 12 colors using the viridis palette, though having 12 separate colors for a discrete category is probably pushing the limits of what is easily interpretable. These colors would be added in alphabetical order as a default as the Team variable is a character. This would mean that Balliol would have the darkest purple color and Wadham the lightest yellow. A better way of assigning color would be by initial or final rank. I decided to assign here by initial rank. Therefore I converted the Team variable to a factor and made the levels the order of ranks on the first day. The easiest way to do this was to use unique(dfl$Team) as they appear in rank order of the first day in the dataset.\n\nlibrary(viridis) #for color scale\n\n#refactor Team to be in rank order (same as order appears in dataset)\ndfl$Team <- factor(dfl$Team, levels = unique(dfl$Team))\n\nggplot(dfl, aes(as.numeric(factor(day)), rank, color = Team)) +\n  geom_bump(size=1) +\n  geom_point(size=4) +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_x_continuous(breaks=1:7) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  scale_color_manual(values=viridis(12,option=\"C\")) +\n  xlab(\"Day\") +\n  ylab(\"Rank\") +\n  theme_classic() +\n  xlab(\"Day\") +\n  ylab(\"\") +\n  theme_classic() +\n  theme(\n    axis.ticks.y = element_blank(),\n    axis.line.y = element_blank(),\n    axis.text.y = element_text(size = rel(1.5)),\n    legend.position = \"none\"\n  )\n\n\n\n\n\n10.2.1 Practical Example - Babyname Popularity Over Time.\nhttps://github.com/steodose/Tidy-Tuesday/blob/master/Week%2028_2022.R"
  }
]