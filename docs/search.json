[
  {
    "objectID": "bumps.html#basic-bump-chart-in-ggplot",
    "href": "bumps.html#basic-bump-chart-in-ggplot",
    "title": "10  Bump charts",
    "section": "10.1 Basic Bump Chart in ggplot()",
    "text": "10.1 Basic Bump Chart in ggplot()\nWe can look at how to make a bump chart using basic ggplot2 syntax. We’ll recreate the above chart. Let’s import the data:\n\nlibrary(tidyverse)\n\ndf <- read_csv(\"data_raw/torpids.csv\")\nhead(df)\n\n# A tibble: 6 x 8\n  Team            Day1  Day2  Day3  Day4  Day5  Day6  Day7\n  <chr>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 Exeter             1     2     3     3     4     5     4\n2 Brasenose          2     1     1     1     1     1     1\n3 Balliol            3     4     4     5     6     7     8\n4 Corpus Christi     4     3     2     2     2     3     3\n5 Pembroke           5     5     6     7     8     9     9\n6 Trinity            6     7     7     6     5     4     5\n\n\nWe have 12 rows of data. Each row is a college team. There are eight columns with the last seven being the ranking of each college on that day. To turn the data into a plottable format, we need to have a long data frame with columns team, day and rank.\n\ndfl <- df %>%\n  pivot_longer(cols=2:8, names_to = \"day\", values_to = \"rank\")\nhead(dfl)\n\n# A tibble: 6 x 3\n  Team   day    rank\n  <chr>  <chr> <dbl>\n1 Exeter Day1      1\n2 Exeter Day2      2\n3 Exeter Day3      3\n4 Exeter Day4      3\n5 Exeter Day5      4\n6 Exeter Day6      5\n\n\nWe can now plot day against rank using a combination of geom_line() and geom_plot(). First we will create a plot color with a legend depicting each college. We use scale_y_reverse() to plot the rankings on the y-axis from highest rank at the top of the plot to lowest ranking at the bottom.\n\nggplot(dfl, aes(x = day, y = rank, color = Team, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  xlab(\"\")+\n  scale_y_reverse(breaks=1:12) +\n  theme_classic()\n\n\n\n\nHowever, I think this plot is a little too colorful. Alternatively, we could create the plot in one color and add labels on the y-axis that have the names of the original ranks of teams. This would be more similar to the original plot:\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  xlab(\"\")+\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  theme_classic()\n\n\n\n\nThere are probably several stylistic changes we could make to this plot to make it more visually appealing. It’s often nice with bump charts to have the dots be empty circles. We can do this by adding smaller white points on top of the points that we already plotted:\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  xlab(\"\") +\n  ylab(\"\") +\n  theme_classic() \n\n\n\n\nIn this plot, I have used the theme() function to remove the y axis line and tick marks and to make the text larger.\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1) +\n  geom_point(size=4) +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  xlab(\"\") +\n  ylab(\"\") +\n  theme_classic() +\n  theme(\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        axis.text.y = element_text(size = rel(1.5))\n        )\n\n\n\n\nHighlighting Individual Groups\nAnother thing that is often beneficial in bump charts is to highlight individual groups of interest. This is particularly useful if there are lots of subjects. For example, let’s say we are interested in the change in ranking of the Trinity boat over time. What we would like to do is make the other lines more transparent and to make Trinity’s line bolder. To do this, we use alpha() to set the transparencies of the other crews and I also made their colors grayer. Then I create a dataframe that only includes Trinity’s data to plot over the top of our plot, and change the color of their points and lines and thicken their line to emphasize it.\n\nTrinity <- dfl %>% filter(Team==\"Trinity\")\n\nggplot(dfl, aes(x = day, y = rank, group = Team)) +\n  geom_line(lwd=1, color=\"gray50\", alpha=.3) +\n  geom_point(size=4, color=\"gray50\", alpha=.3) +\n  geom_line(data=Trinity, lwd=2, color=\"#710909\") +\n  geom_point(data=Trinity, size=4, color=\"#710909\") +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  xlab(\"\") +\n  ylab(\"\") +\n  theme_classic() +\n  theme(\n        axis.ticks.y = element_blank(),\n        axis.line.y = element_blank(),\n        axis.text.y = element_text(size = rel(1.5))\n        )"
  },
  {
    "objectID": "bumps.html#ggbump-package",
    "href": "bumps.html#ggbump-package",
    "title": "10  Bump charts",
    "section": "10.2 ggbump() package",
    "text": "10.2 ggbump() package\nI like the classic angular lines aesthetic of bump charts. However, there may be use cases where we wish to have curved lines joining points. This can be done effectively with the ggbump package.\nThe below code creates the generic plot for the college bumps dataset above. I’ve kept the scale_y_reverse() in the code so that we have the highest ranked team (i.e. 1) at the top of the y-axis, and the lowest ranked at the bottom. The geom_bump() function adds a curved line rather than straight line for each subject across time. The other difference is that I have made the day column numeric by using as.numeric(factor(day)) rather than just day. Although geom_bump() should work with characters, I have found that converting them to numeric variables works best.\n\nlibrary(ggbump)\n\nggplot(dfl, aes(as.numeric(factor(day)), rank, color = Team)) +\n    geom_bump(size=1) +\n    scale_y_reverse(breaks=1:12) \n\n\n\n\nBelow I have customized this plot with some additional code. I have decided to create a palette of 12 colors using the viridis palette, though having 12 separate colors for a discrete category is probably pushing the limits of what is easily interpretable. These colors would be added in alphabetical order as a default as the Team variable is a character. This would mean that Balliol would have the darkest purple color and Wadham the lightest yellow. A better way of assigning color would be by initial or final rank. I decided to assign here by initial rank. Therefore I converted the Team variable to a factor and made the levels the order of ranks on the first day. The easiest way to do this was to use unique(dfl$Team) as they appear in rank order of the first day in the dataset.\n\nlibrary(viridis) #for color scale\n\n#refactor Team to be in rank order (same as order appears in dataset)\ndfl$Team <- factor(dfl$Team, levels = unique(dfl$Team))\n\nggplot(dfl, aes(as.numeric(factor(day)), rank, color = Team)) +\n  geom_bump(size=1) +\n  geom_point(size=4) +\n  geom_point(color = \"#FFFFFF\", size = 2) +\n  scale_x_continuous(breaks=1:7) +\n  scale_y_reverse(breaks=1:12, labels = df$Team) +\n  scale_color_manual(values=viridis(12,option=\"C\")) +\n  xlab(\"Day\") +\n  ylab(\"Rank\") +\n  theme_classic() +\n  xlab(\"Day\") +\n  ylab(\"\") +\n  theme_classic() +\n  theme(\n    axis.ticks.y = element_blank(),\n    axis.line.y = element_blank(),\n    axis.text.y = element_text(size = rel(1.5)),\n    legend.position = \"none\"\n  )\n\n\n\n\n\n10.2.1 Practical Example - Babyname Popularity Over Time.\nBelow is an example of using the ggbump package to plot changing trends of babyname popularity over time. The code for this was inspired by a plot of European Flight traffic made by Stephan Teodosescu.\nEssentially what we want to do is find the rankings in popularity of different babynames between two timepoints. We will plot the top 12 names at the final timepoint and track their evolution in popularity from the first timepoint. By only including these names, we avoid too much clutter in the chart and we are able to see how stable or otherwise the rankings are. I chose to look at the popularity of male names between 2012 and 2017.\nWe first get the ranking of all male names between 2012 and 2017. The data come from the babynames package:\n\nlibrary(babynames)\n\nbaby_year <- babynames %>%\n  filter(sex==\"M\") %>%\n  filter(year>=2012, year<=2017) %>%\n  select(year, name, total = n) %>%\n  group_by(year) %>%\n  mutate(\n    rank = row_number(desc(total))\n  ) %>%\n  ungroup() %>%\n  arrange(rank, year)\n\nbaby_year\n\n# A tibble: 84,665 x 4\n    year name  total  rank\n   <dbl> <chr> <int> <int>\n 1  2012 Jacob 19069     1\n 2  2013 Noah  18241     1\n 3  2014 Noah  19286     1\n 4  2015 Noah  19613     1\n 5  2016 Noah  19082     1\n 6  2017 Liam  18728     1\n 7  2012 Mason 18964     2\n 8  2013 Jacob 18148     2\n 9  2014 Liam  18451     2\n10  2015 Liam  18355     2\n# ... with 84,655 more rows\n\n\nWe can see that for the years 2012-2017, the names “Jacob”, “Noah” and “Liam” were the most popular.\nTo limit our chart to just the 12 most popular names in 2017, we can collect those names by filtering for rank and year and using pull() to grab the names:\n\nbaby_top <- baby_year %>%\n  filter(year == 2017, rank <= 12) %>%\n  pull(name)\n\nbaby_top\n\n [1] \"Liam\"     \"Noah\"     \"William\"  \"James\"    \"Logan\"    \"Benjamin\"\n [7] \"Mason\"    \"Elijah\"   \"Oliver\"   \"Jacob\"    \"Lucas\"    \"Michael\" \n\n\nAlways a difficulty with 12 discrete groups is what colors to assign to each in the chart. Here, I create a vector of colors using the pals color palette package:\n\nbaby_colors <- pals::tol(12)\nnames(baby_colors)<-baby_top\nbaby_colors\n\n     Liam      Noah   William     James     Logan  Benjamin     Mason    Elijah \n\"#332288\" \"#6699CC\" \"#88CCEE\" \"#44AA99\" \"#117733\" \"#999933\" \"#DDCC77\" \"#661100\" \n   Oliver     Jacob     Lucas   Michael \n\"#CC6677\" \"#AA4466\" \"#882255\" \"#AA4499\" \n\n\nNow for the actual plot. The use of geom_point(), geom_bump(), scale_y_reverse(), and scale_color_manual() are similar to how we have used them before. Notably in scale_y_reverse() we make the breaks go from 80 to -2. This is to ensure that Oliver gets plotted in 2012 as it’s ranking was just inside that value then. The -2 is to ensure that we can annotate the 2012 and 2017 at the top of the plot.\nThe coord_cartesian() is used to make sure that our plot stretches across the canvas appropriately.\nNext, the theme elements dictate the color of the plot background and the positioning of the title. The x-axis and y-axis titles are removed with labs() and the title’s name is added.\nFinally, we add text to the plot. The rankings and names of each line are positioned using geom_text() from the ggtext package, and the labels “2012” and “2017” are manually positioned using annotate().\n\nlibrary(ggtext)\n\nbaby_year %>%\n  filter(name %in% baby_top) %>%\n  ggplot(aes(year, rank, col = name)) +\n  geom_point(size = 2) +\n  geom_bump(size = 1) +\n  scale_y_reverse(position = \"right\", breaks = seq(80, -2, -2)) +\n  scale_color_manual(values = baby_colors) +\n  coord_cartesian(xlim = c(2010, 2017.5), ylim = c(80, -1.25), expand = F) +\n  theme_void() +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"floralwhite\", color = \"floralwhite\"),\n    plot.title = element_text(\n      margin = margin(t = 3, b = 4, unit = \"mm\"),\n      hjust = 0.5\n    ),\n    plot.margin = margin(0,1,1.5,1.2, \"cm\")\n  ) +\n  labs(\n    x = \"\",\n    y = \"\",\n    title = \"Popularity of Selected Boy's Names in USA 2012-2017\"\n  )+\n  geom_text(\n    data = baby_year %>%\n    filter(year == 2012, name %in% baby_top),\n    aes(label = name),\n    hjust = 1,\n    nudge_x = -0.1,\n    fontface = \"bold\"\n  ) +\n  geom_text(\n    data = baby_year %>%\n      filter(year == 2017, name %in% baby_top),\n    aes(label = rank),\n    hjust = 0,\n    nudge_x = 0.1,\n    size = 4,\n    fontface = \"bold\"\n  ) +\n  annotate(\n    \"text\",\n    x = c(2011.75, 2016.75),\n    y = c(-0.75, -0.75),\n    label = c(2012, 2017),\n    hjust = c(0, 0),\n    vjust = 1,\n    size = 4,\n    fontface = \"bold\"\n  )"
  },
  {
    "objectID": "savingexporting.html#ggsave",
    "href": "savingexporting.html#ggsave",
    "title": "11  Saving and Exporting Plots",
    "section": "11.1 ggsave()",
    "text": "11.1 ggsave()\nA more premium option is to use a function from ggplot called ggsave(). The first step you should do is to assign your plot to an object name. In the code below, we are making a scatterplot that we save to the object plot1:\n\nlibrary(tidyverse)\n\ncheese <- read_csv(\"data_raw/cheese.csv\")\n\nplot1 <- ggplot(cheese, aes(x = chol, y = kcal)) + \n     geom_point(color='purple', size=2) + \n     theme_classic() +\n     xlab(\"Cholesterol\") +\n     ylab(\"Calories in kcal\") +\n     ggtitle(\"Cheese\")\n\nplot1\n\n\n\n\nNext, run a line of code that will save your plot. You type ggsave(). The first thing you put inside this is the location where you want your plot to be stored. You need to write a location on your computer. If you are using an Rproject such as with this course, you could put your plot in a folder called img. Remember to type the file extension .png or .pdf after the name of your new plot. The second thing you need to write is the name of the graph object you wish to save. Here our graph is called plot1.\n\nggsave(\"img/cheese_plot.png\", plot1)  # save as a png\n\nggsave(\"img/cheese_plot.pdf\", plot1)  # save as a pdf\n\nYou can also play around with the width and height of your saved image. You probably need to trial and error this a few times to get the proportions that you really like. Here we are making an image that is 10 inches wide and 8 inches high.\n\n#(in inches, though can be in cm)\nggsave(\"img/cheese_plot2.png\", plot1, width = 10, height = 8)"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "12  Summary",
    "section": "",
    "text": "There is no summary. I was just scared to delete this file."
  },
  {
    "objectID": "slopes.html",
    "href": "slopes.html",
    "title": "7  Slope Charts",
    "section": "",
    "text": "Slope charts are useful in demonstrating the difference in values of subjects or groups over two or more timepoints.\nTo make a slope chart we need to put our data into long format in three columns. A subject variable, the numeric value and the grouping variable. Below is an example of this data:\n\nset.seed(131) \nbefore = abs(rnorm(10,2,1.))\nafter = abs(rnorm(10,3,1))\nSubject <- rep(paste0('S',seq(1:10)), 2)\nData <- data.frame(Value = matrix(c(before,after),ncol=1))\nbeforeAfter <- rep(c('Before', 'After'), each = length(before))\ndf <- cbind(Subject, Data, beforeAfter)\ndf\n\n   Subject     Value beforeAfter\n1       S1 1.1811534      Before\n2       S2 1.4561524      Before\n3       S3 3.0208905      Before\n4       S4 2.0467039      Before\n5       S5 1.5498971      Before\n6       S6 1.7884993      Before\n7       S7 3.1037737      Before\n8       S8 2.0579823      Before\n9       S9 0.2305498      Before\n10     S10 2.7528265      Before\n11      S1 2.2078164       After\n12      S2 3.3197308       After\n13      S3 3.2088026       After\n14      S4 4.4037762       After\n15      S5 3.7996981       After\n16      S6 2.2889395       After\n17      S7 1.4994040       After\n18      S8 2.6701071       After\n19      S9 3.2430087       After\n20     S10 2.5050661       After\n\n\nThe key to making a slope chart in ggplot2 is to add group=Subject, so the ‘before’ and ‘after’ scores are linked by a line made with geom_line().\n\nlibrary(tidyverse)\n\nggplot(df, aes(x=beforeAfter, y=Value, group=Subject)) +\n  geom_line()\n\n\n\n\nThe obvious problem here is that the order of the x-axis is in alphabetical rather than the order we want them. We need to refactor the levels and plot again:\n\ndf$beforeAfter <- factor(df$beforeAfter, levels=c(\"Before\",\"After\"))\n\nggplot(df, aes(x=beforeAfter, y=Value, group=Subject)) +\n  geom_line()\n\n\n\n\nAs ever with ggplot2 we can heavily customize this plot to make it look a bit nicer.\n\nggplot(df, aes(x=beforeAfter, y=Value, group=Subject)) +\n  geom_line(lwd=1, color=\"#123abc\", alpha=.7) +\n  xlab(\"\") +\n  ylab(\"Value\") +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = rel(1.1)),\n    axis.title = element_text(size = rel(1.2))\n  ) \n\n\n\n\nBelow are some other common adjustments made to slope charts.\nAdding points\nHere I add points to the start and end of the lines by adding two different geom_points(). A smaller one filled with white and a larger one filled with the same color as the line, but without the transparency.\n\nggplot(df, aes(x=beforeAfter, y=Value, group=Subject)) +\n  geom_line(lwd=1, color=\"#123abc\", alpha=.7) +\n  geom_point(size=4, color=\"#123abc\") +\n  geom_point(size=2, color=\"#ffffff\") +\n  xlab(\"\") +\n  ylab(\"Value\") +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = rel(1.1)),\n    axis.title = element_text(size = rel(1.2))\n  ) \n\n\n\n\nHighlight lines going in different directions\nSometimes it’s good to show which lines are going up or down. To do this, I add a fourth column stating if the data are going up or down. I make the data wide, add the column and then make the data long again. This also requires reorder the levels of the columns beforeAfter again:\n\ndf <- df %>% \n  pivot_wider(values_from = Value, names_from = beforeAfter) %>%\n  mutate(diff = After - Before, \n         diffgrp = ifelse(diff<0,\"down\",\"up\")) %>%\n  pivot_longer(cols=2:3, names_to = \"beforeAfter\") \n\ndf$beforeAfter <- factor(df$beforeAfter, levels=c(\"Before\",\"After\"))\n\ndf\n\n# A tibble: 20 x 5\n   Subject   diff diffgrp beforeAfter value\n   <chr>    <dbl> <chr>   <fct>       <dbl>\n 1 S1       1.03  up      Before      1.18 \n 2 S1       1.03  up      After       2.21 \n 3 S2       1.86  up      Before      1.46 \n 4 S2       1.86  up      After       3.32 \n 5 S3       0.188 up      Before      3.02 \n 6 S3       0.188 up      After       3.21 \n 7 S4       2.36  up      Before      2.05 \n 8 S4       2.36  up      After       4.40 \n 9 S5       2.25  up      Before      1.55 \n10 S5       2.25  up      After       3.80 \n11 S6       0.500 up      Before      1.79 \n12 S6       0.500 up      After       2.29 \n13 S7      -1.60  down    Before      3.10 \n14 S7      -1.60  down    After       1.50 \n15 S8       0.612 up      Before      2.06 \n16 S8       0.612 up      After       2.67 \n17 S9       3.01  up      Before      0.231\n18 S9       3.01  up      After       3.24 \n19 S10     -0.248 down    Before      2.75 \n20 S10     -0.248 down    After       2.51 \n\n\nHere we color by the up or down group:\n\nggplot(df, aes(x=beforeAfter, y=value, group=Subject, color=diffgrp)) +\n  geom_line(lwd=1, alpha=.7) +\n  scale_color_manual(values=c(\"#cb0123\", \"#123abc\"))+\n  xlab(\"\") +\n  ylab(\"Value\") +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = rel(1.1)),\n    axis.title = element_text(size = rel(1.2)),\n    legend.position = \"none\"\n  ) \n\n\n\n\nAdd summary statistic information to slopechart\n\ndf.sum <- df %>% \n group_by(beforeAfter) %>%\n  summarise(means = mean(value),\n            medians = median(value),\n            lq = quantile(value,.25),\n            uq = quantile(value,.75),\n            ) \n\ndf.sum$beforeAfter <- factor(df.sum$beforeAfter, levels=levels(df$beforeAfter))\n\ndf.sum\n\n# A tibble: 2 x 5\n  beforeAfter means medians    lq    uq\n  <fct>       <dbl>   <dbl> <dbl> <dbl>\n1 Before       1.92    1.92  1.48  2.58\n2 After        2.91    2.94  2.34  3.30\n\n\nTo plot the change in means over this slopechart, I make each subject’s lines become much more transparent by increasing the alpha level in geom_line(). We then add a second geom_line() where we feed in the summary data including the means. We make that line bolder and darker. We also need to add group=1 to this to ensure that it knows to group the two rows of that dataset together.\n\nggplot(df, aes(x=beforeAfter, y=value, group=Subject)) +\n  geom_line(color=\"dodgerblue\", alpha=.4) +\n  geom_line(data=df.sum, \n            aes(x=beforeAfter, y=means, group=1), \n            lwd=2, color=\"#123abc\")+\n  xlab(\"\") +\n  ylab(\"Value\") +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = rel(1.1)),\n    axis.title = element_text(size = rel(1.2))\n  ) \n\n\n\n\nHere I am adding a ribbon of the quartile ranges with geom_ribbon(). The line in the middle of the ribbon is the median. These two elements plus the lines of the subjects are all added separately in the plot below.\n\nggplot() +\n  geom_ribbon(data = df.sum,\n              aes(x=beforeAfter,\n                  ymin = lq, \n                  ymax = uq,\n                  group=1), \n              fill = \"cornflowerblue\",\n              alpha=.1) +\n  geom_line(data = df, \n            aes(x=beforeAfter, y=value, group=Subject),\n           color=\"gray54\", alpha=.3) +\n   geom_line(data=df.sum, \n            aes(x=beforeAfter, y=medians, group=1), \n            lwd=2, color=\"#123abc\",alpha=.5)+\n  xlab(\"\") +\n  ylab(\"Value\") +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = rel(1.1)),\n    axis.title = element_text(size = rel(1.2))\n  ) \n\n\n\n\n\nSlopecharts for more than two groups\nSlopecharts can also be used form more than two groups. Here we compare the change in value on the y-axis for 15 subjects over four timepoints.\nGenerating random data:\n\nset.seed(10) \nday1 = abs(rnorm(15,2,1.))\nday2 = abs(rnorm(15,3,1))\nday3 = abs(rnorm(15,3.5,1))\nday4 = abs(rnorm(15,4,1))\nSubject <- rep(paste0('S',seq(1:15)), 4)\nData <- data.frame(Value = matrix(c(day1,day2,day3,day4),ncol=1))\nday <- rep(c('Day1','Day2','Day3','Day4'), each = length(day1))\nddf <- cbind(Subject, Data, day)\nhead(ddf)\n\n  Subject     Value  day\n1      S1 2.0187462 Day1\n2      S2 1.8157475 Day1\n3      S3 0.6286695 Day1\n4      S4 1.4008323 Day1\n5      S5 2.2945451 Day1\n6      S6 2.3897943 Day1\n\n\nHere is one way of plotting these data, coloring the points by day.\n\nggplot(ddf, aes(x=day, y=Value, group=Subject)) +\n  geom_line(alpha=.7, color=\"gray77\", alpha=.3) +\n  geom_point(size=4, aes(color = day)) +\n  geom_point(size=2, color=\"#ffffff\") +\n  xlab(\"\") +\n  ylab(\"Value\") +\n  theme_classic() +\n  theme(\n    axis.text = element_text(size = rel(1.1)),\n    axis.title = element_text(size = rel(1.2)),\n    legend.position = 'none'\n  ) +\n  scale_color_manual(\n    values =  c('#abcdac', '#abcdcc', '#abcdec', '#abcdfc')\n    )\n\n\n\n\n\n\n7.0.1 Slope charts with smCSF package\nThere are also some R packages that build slopegraphs using ggplot in the background. One that might be useful is the smCSF package.\n\ndevtools::install_github('smin95/smplot2', force = TRUE)\n\n\nlibrary(smplot2)\n\nWith this package, we can use the function sm_slope() to add both points and lines. The coloring of points is done using the fill argument.\n\nggplot(data = df, aes(x = beforeAfter, y = value, fill = beforeAfter)) +\n  sm_slope(group = Subject,\n           labels = c('Before', 'After')) +\n  scale_fill_manual(values =  sm_color('blue','orange'))\n\n\n\n\nThere is much more fine tuning that can be done, including adding summary statistics. This can be found in the online tutorial.\n\nggplot(data = df, aes(x = beforeAfter, y = value)) +\n  sm_slope(group = Subject,\n           show_mean = TRUE,\n           labels = c('Before', 'After'),\n           point.params = list(fill = sm_color('blue'),\n                               color = 'white',\n                               size = 2.2,\n                               stroke = 0.65,\n                               shape = 21,\n                               alpha = 0.3),\n           line.params = list(color = sm_color('skyblue'),\n                              alpha = 0.3),\n            avgPoint.params = list(color='transparent', shape = 21,\n                                  size = 4, fill = sm_color('blue')),\n           avgLine.params = list(size = 1, color = sm_color('blue'))\n           )"
  }
]